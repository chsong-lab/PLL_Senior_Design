import matplotlib
matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import tkinter as tk
import tkinter.ttk as ttk
from tkinter import *
import Pmw, os, csv, datetime, math
from tkinter import messagebox
import tkinter.simpledialog
import numpy as np
from numpy import exp, sqrt, log, log10, absolute, genfromtxt
import warnings

warnings.filterwarnings("ignore")

class MainGUI(Frame):
    def __init__(self, master):
        self.master = master
        Frame.__init__(self, master)
        self.grid()
        self.master.title("PLL TOOL")
        
        os.chdir(os.path.join(os.getenv('userprofile'), 'Desktop'))  # change the current directory to desktop       
        if not os.path.exists('GD PLL Design Tool'):
            os.makedirs('GD PLL Design Tool')

        for r in range(42):
            self.master.rowconfigure(r, weight=1)    
        for c in range(50):
            self.master.columnconfigure(c, weight=1)
            
        Frame1=  Frame(highlightbackground="black", highlightcolor="black", highlightthickness=2, bd=0)
        Frame1.grid(row = 1, column =1, rowspan = 16, columnspan = 33, sticky = W+E+N+S) 
      
        Frame2=  Frame(highlightbackground="black", highlightcolor="black", highlightthickness=2, bd=0)
        Frame2.grid(row = 1, column =35, rowspan = 16, columnspan = 14, sticky = W+E+N+S) 
        
        Frame3=  Frame(highlightbackground="black", highlightcolor="black", highlightthickness=2, bd=0)
        Frame3.grid(row = 18, column =37, rowspan = 23, columnspan = 12, sticky = W+E+N+S)
        
        Frame4=  Frame(highlightcolor="black", highlightthickness=2, bd=0)
        Frame4.grid(row = 18, column =24, rowspan = 23, columnspan = 13, sticky = W+E+N+S)
    
        GuiTitle = ttk.Label(master, text="General Dynamics Mission Systems Phase Locked Loop Tool", font="Arial 18 bold")
        GuiTitle.grid(row=0, column=0,columnspan=50)
        
        load_button = Button(master, text="Load", bg="white",font="Arial 10 bold", command=self.load)
        load_button.grid(row=0, column=1, columnspan=1)
        
        save_button = Button(master, text="Save", bg="white",font="Arial 10 bold", command=self.save)
        save_button.grid(row=0, column=2, columnspan=1)
                
        label1 = ttk.Label(Frame1, text="VCO Frequency", font="Arial 10 bold")
        label1.place(in_=Frame1, x=5, y=10)   
        self.entry1 = Entry(Frame1, width=10)
        self.entry1.place(in_=Frame1, x=175, y=10)
        
 
        label2 = ttk.Label(Frame1, text="Fixed In-Loop Divider", font="Arial 10 bold")
        label2.place(in_= Frame1, x=5, y=40)
        self.entry2 = Entry(Frame1, width=10)
        self.entry2.place(in_=Frame1, x=175, y=40)
        
        label3 = ttk.Label(Frame1, text="PFD Frequency", font="Arial 10 bold")
        label3.place(in_= Frame1, x=5, y=70)
        self.entry3 = Entry(Frame1, width=10)
        self.entry3.place(in_=Frame1, x=175, y=70)

        label4 = ttk.Label(Frame1, text="TCXO Frequency", font="Arial 10 bold")
        label4.place(in_= Frame1, x=5, y=100)
        self.entry4 = Entry(Frame1, width=10)
        self.entry4.place(in_=Frame1, x=175, y=100)

        label5 = ttk.Label(Frame1, text="VCO Gain [Hz/V]", font="Arial 10 bold")
        label5.place(in_= Frame1, x=5, y=130)
        self.entry5 = Entry(Frame1, width=10)
        self.entry5.place(in_=Frame1, x=175, y=130)

        label6 = ttk.Label(Frame1, text="Phase Detector Gain", font="Arial 10 bold")
        label6.place(in_= Frame1, x=5, y=160)
        self.entry6 = Entry(Frame1, width=10)
        self.entry6.place(in_=Frame1, x=175, y=160)

        label7= ttk.Label(Frame1, text="Phase Detector Offset", font="Arial 10 bold")
        label7.place(in_= Frame1, x=5, y=190)
        self.entry7 = Entry(Frame1, width=10)
        self.entry7.place(in_=Frame1, x=175, y=190) 
        
        label8 = ttk.Label(Frame1, text="PLL Division Ration N", font="Arial 10 bold")
        label8.place(in_= Frame1, x=5, y=220)
        self.entry8 = Entry(Frame1, width=10)
        self.entry8.place(in_=Frame1, x=175, y=220) 
    
        label9 = ttk.Label(Frame1, text="Desired Bandwidth", font="Arial 10 bold")
        label9.place(in_= Frame1, x=5, y=250)
        self.entry9 = Entry(Frame1, width=10)
        self.entry9.place(in_=Frame1, x=175, y=250) 

        label10 = ttk.Label(Frame1, text="Desired Phase Margin", font="Arial 10 bold")
        label10.place(in_= Frame1, x=5, y=280)
        self.entry10 = Entry(Frame1, width=10)
        self.entry10.place(in_=Frame1, x=175, y=280) 

        paramMenu=['GHz','MHz','kHz']
        self.option_select1=StringVar(root)
        self.option_select1.set(VCO_Freq_Hz) #option_select1.set("GHz")
        drop1=OptionMenu(root,self.option_select1,*paramMenu)
        drop1.place(in_=Frame1,x=245,y=7)   
        drop1.config(font=('Arial 6 bold'),bg='white',width=3)
        drop1['menu'].config(font=('Arial 6 bold'),bg='white')
        
        paramMenu=['GHz','MHz','kHz']
        self.option_select2=StringVar(root)
        self.option_select2.set(PFD_Freq_Hz)
        drop2=OptionMenu(root,self.option_select2,*paramMenu)
        drop2.place(in_=Frame1,x=245,y=67)   
        drop2.config(font=('Arial 6 bold'),bg='white',width=3)
        drop2['menu'].config(font=('Arial 6 bold'),bg='white') 
        
        paramMenu=['GHz','MHz','kHz']
        self.option_select3=StringVar(root)
        self.option_select3.set(TCXO_Freq_Hz)
        drop3=OptionMenu(root,self.option_select3,*paramMenu)
        drop3.place(in_=Frame1,x=245,y=97)   
        drop3.config(font=('Arial 6 bold'),bg='white',width=3)
        drop3['menu'].config(font=('Arial 6 bold'),bg='white')
        
        paramMenu=['GHz','MHz','kHz']
        self.option_select4=StringVar(root)
        self.option_select4.set(Desired_Band_Hz)
        drop3=OptionMenu(root,self.option_select4,*paramMenu)
        drop3.place(in_=Frame1,x=245,y=247)   
        drop3.config(font=('Arial 6 bold'),bg='white',width=3)
        drop3['menu'].config(font=('Arial 6 bold'),bg='white') 
        
        label11 = ttk.Label(Frame1, text="S-Domain Response Settings", font="Arial 10 bold")
        label11.place(in_= Frame1, x=400, y=10)
        
        label12 = ttk.Label(Frame1, text="Start Frequency", font="Arial 10 bold")
        label12.place(in_= Frame1, x=360, y=40)
        self.entry12 = Entry(Frame1, width=10)
        self.entry12.place(in_=Frame1, x=510, y=40)
        
        paramMenu=['GHz','MHz','kHz']
        self.option_select5=StringVar(root)
        self.option_select5.set(Start_Freq_Hz)
        drop3=OptionMenu(root,self.option_select5,*paramMenu)
        drop3.place(in_=Frame1,x=580,y=37)   
        drop3.config(font=('Arial 6 bold'),bg='white',width=3)
        drop3['menu'].config(font=('Arial 6 bold'),bg='white') 
        
        label13 = ttk.Label(Frame1, text="Stop Frequency", font="Arial 10 bold")
        label13.place(in_= Frame1, x=360, y=70)
        self.entry13 = Entry(Frame1, width=10)
        self.entry13.place(in_=Frame1, x=510, y=70)
        
        paramMenu=['GHz','MHz','kHz']
        self.option_select6=StringVar(root)
        self.option_select6.set(Stop_Freq_Hz)
        drop3=OptionMenu(root,self.option_select6,*paramMenu)
        drop3.place(in_=Frame1,x=580,y=67)   
        drop3.config(font=('Arial 6 bold'),bg='white',width=3)
        drop3['menu'].config(font=('Arial 6 bold'),bg='white')
        
        
        label14 = ttk.Label(Frame1, text="Number of Points", font="Arial 10 bold")
        label14.place(in_= Frame1, x=360, y=100)
        self.entry14 = Entry(Frame1, width=10)
        self.entry14.place(in_=Frame1, x=510, y=100)
        
        label15 = ttk.Label(Frame1, text="Transient Response Settings", font="Arial 10 bold")
        label15.place(in_= Frame1, x=400, y=130)

        label16 = ttk.Label(Frame1, text="Transient Mode", font="Arial 10 bold")
        label16.place(in_= Frame1, x=360, y=160)
        
        def transResp(event):
        
            global chosen_option1
            chosen_option1 = self.option_select10.get()
            
            if chosen_option1 == 'Frequency Step':
                label17 = ttk.Label(Frame1, text="Initial Frequency  ", font="Arial 10 bold")
                label17.place(in_= Frame1, x=320, y=190)

       
                label18 = ttk.Label(Frame1, text="Frequency Step  ", font="Arial 10 bold")
                label18.place(in_= Frame1, x=320, y=220)

            
                label19 = ttk.Label(Frame1, text="Initial Time  ", font="Arial 10 bold")
                label19.place(in_= Frame1, x=522, y=190)

                
                label20 = ttk.Label(master, text="Final Time", font="Arial 10 bold")
                label20.place(in_= Frame1, x=522, y=220)

                
            elif chosen_option1 == 'Frequency Sweep':
                label17 = ttk.Label(Frame1, text="Initial Frequency ", font="Arial 10 bold")
                label17.place(in_= Frame1, x=320, y=190)

       
                label18 = ttk.Label(Frame1, text="Frequency Delta", font="Arial 10 bold")
                label18.place(in_= Frame1, x=320, y=220)

            
                label19 = ttk.Label(Frame1, text="Sweep Time ", font="Arial 10 bold")
                label19.place(in_= Frame1, x=522, y=190)

                
                label20 = ttk.Label(master, text="Final Time", font="Arial 10 bold")
                label20.place(in_= Frame1, x=522, y=220)

                
            else:
                label17 = ttk.Label(Frame1, text="Initial Phase (deg)", font="Arial 10 bold")
                label17.place(in_= Frame1, x=320, y=190)

       
                label18 = ttk.Label(Frame1, text="Phase Step (deg)", font="Arial 10 bold")
                label18.place(in_= Frame1, x=320, y=220)

            
                label19 = ttk.Label(Frame1, text="Initial Time ", font="Arial 10 bold")
                label19.place(in_= Frame1, x=522, y=190)

                
                label20 = ttk.Label(master, text="Final Time", font="Arial 10 bold")
                label20.place(in_= Frame1, x=522, y=220)

                
        myoptions=['Frequency Step','Frequency Sweep','Phase Step']
        self.option_select10=StringVar(root)
        self.option_select10.set("Frequency Step")
        drop=OptionMenu(root,self.option_select10,*myoptions, command=transResp)
        drop.place(in_= Frame1, x=500, y=155)   
        drop.config(font=('Arial 10 bold'),bg='white',width=16)
        drop['menu'].config(font=('Arial 10 bold'),bg='white')      
        
        label17 = ttk.Label(Frame1, text="Initial Frequency", font="Arial 10 bold")
        label17.place(in_= Frame1, x=320, y=190)
        self.entry17 = Entry(Frame1, width=10)
        self.entry17.place(in_=Frame1, x=445, y=190)
   
        label18 = ttk.Label(Frame1, text="Frequency Step", font="Arial 10 bold")
        label18.place(in_= Frame1, x=320, y=220)
        self.entry18 = Entry(Frame1, width=10)
        self.entry18.place(in_=Frame1, x=445, y=220)
    
        label19 = ttk.Label(Frame1, text="Initial Time", font="Arial 10 bold")
        label19.place(in_= Frame1, x=522, y=190)
        self.entry19 = Entry(Frame1, width=10)
        self.entry19.place(in_=Frame1, x=610, y=190)
        
        label20 = ttk.Label(master, text="Final Time", font="Arial 10 bold")
        label20.place(in_= Frame1, x=522, y=220)
        self.entry20 = Entry(Frame1, width=10)
        self.entry20.place(in_=Frame1, x=610, y=220)
        
        noise_button = Button(Frame1, text="Noise Contributions", bg="white",font="Arial 10 bold", command=self.new_window1)
        noise_button.place(in_= Frame1, x=320, y=247) 
        
        label21 = ttk.Label(Frame1, text="Show Integration Limits?", font="Arial 10 bold")
        label21.place(in_= Frame1, x=475, y=250)        
        check_var = IntVar()
        Checkbutton(master, variable=check_var).place(in_= Frame1, x=640, y=248) 
        
        label22 = ttk.Label(Frame1, text="Noise Integration", font="Arial 10 bold")
        label22.place(in_= Frame1, x=320, y=280) 
        
        label23 = ttk.Label(Frame1, text="From", font="Arial 10 bold")
        label23.place(in_= Frame1, x=450, y=280) 
        self.entry23= Entry(Frame1, width=8)
        self.entry23.place(in_= Frame1, x=500, y=280)
        
        label24 = ttk.Label(Frame1, text="To", font="Arial 10 bold")
        label24.place(in_= Frame1, x=565, y=280)
        self.entry24= Entry(Frame1, width=8)
        self.entry24.place(in_= Frame1, x=600, y=280)
        
        filter_button = Button(Frame2, text="Filter Design", bg="white",font="Arial 10 bold", command=self.filter_design)
        filter_button.place(in_= Frame2, x=7, y=10) 
        
        label37 = ttk.Label(Frame2, text="Fix RC Values", font="Arial 10 bold")
        label37.place(in_= Frame2, x=150, y=10)         
        check_var = IntVar()
        Checkbutton(master, variable=check_var).place(in_= Frame2, x=250, y=10) 
        
        filterType = ttk.Label(Frame2, text="Filter Type:", font="Arial 10 bold")
        filterType.place(in_= Frame2, x=7, y=44)
        
        filterOrder = ttk.Label(Frame2, text="Filter Order:", font="Arial 10 bold")
        filterOrder.place(in_= Frame2, x=7, y=70) 
        
        self.label25 = ttk.Label(Frame2, text="C1", font="Arial 10 bold") #
        self.label25.place(in_= Frame2, x=7, y=100) 
        self.entry25 = Entry(master, width=15)
        self.entry25.place(in_= Frame2, x=50, y=100)
        self.entry25.config(state='disabled')
        
        self.label26 = ttk.Label(Frame2, text="C2", font="Arial 10 bold") #
        self.label26.place(in_= Frame2, x=7, y=130) 
        self.entry26 = Entry(Frame2, width=15)
        self.entry26.place(in_= Frame2, x=50, y=130)
        self.entry26.config(state='disabled')
        
        self.label27 = ttk.Label(Frame2, text="C3", font="Arial 10 bold") #
        self.label27.place(in_= Frame2, x=7, y=160) 
        self.entry27 = Entry(Frame2, width=15)
        self.entry27.place(in_= Frame2, x=50, y=160)
        self.entry27.config(state='disabled')
        
        self.label28 = ttk.Label(Frame2, text="L1", font="Arial 10 bold")
        self.label28.place(in_= Frame2, x=7, y=190) 
        self.entry28 = Entry(Frame2, width=15)
        self.entry28.place(in_= Frame2, x=50, y=190)
        self.entry28.config(state='disabled')

        #label29 = ttk.Label(Frame2, text="C6", font="Arial 10 bold") #
        #label29.place(in_= Frame2, x=7, y=220) 
        #self.entry29 = Entry(Frame2, width=15)
        #self.entry29.place(in_= Frame2, x=50, y=220)
        
        self.label30 = ttk.Label(Frame2, text="R1", font="Arial 10 bold") #
        self.label30.place(in_= Frame2, x=175, y=100) 
        self.entry30 = Entry(Frame2, width=15)
        self.entry30.place(in_= Frame2, x=210, y=100)
        self.entry30.config(state='disabled')

        self.label31 = ttk.Label(Frame2, text="R2", font="Arial 10 bold") #
        self.label31.place(in_= Frame2, x=175, y=130) 
        self.entry31 = Entry(Frame2, width=15)
        self.entry31.place(in_= Frame2, x=210, y=130)
        self.entry31.config(state='disabled')
        
        self.label32 = ttk.Label(Frame2, text="R3", font="Arial 10 bold") #
        self.label32.place(in_= Frame2, x=175, y=160) 
        self.entry32 = Entry(Frame2, width=15)
        self.entry32.place(in_= Frame2, x=210, y=160)
        self.entry32.config(state='disabled')

        #label33 = ttk.Label(Frame2, text="L3", font="Arial 10 bold")
        #label33.place(in_= Frame2, x=175, y=190) 
        #self.entry33 = Entry(Frame2, width=15)
        #self.entry33.place(in_= Frame2, x=210, y=190) 

        #label34 = ttk.Label(Frame2, text="RL", font="Arial 10 bold")
        #label34.place(in_= Frame2, x=175, y=220) 
        #self.entry34 = Entry(Frame2, width=15)
        #self.entry34.place(in_= Frame2, x=210, y=220)
    
        global filterbox
        def filterbox():
                    
            global filtertype
            global filterselect

            if filtertype == 1:  #C1, C2, R2
                filterselect = "Passive"                
                filter_type=Label(root, text='Passive        ')
                filter_type.place(in_= Frame2, x=80, y=44)
                
                self.label30.config(text="    ")     #Remove R1
                self.entry30.place_forget()
                
                self.label32.config(text="    ")     #Remove R3
                self.entry32.place_forget()
                
                self.label27.config(text="    ")     #Remove C3
                self.entry27.place_forget()
                
                self.label28.config(text="    ")     #Remove L1
                self.entry28.place_forget()
                
                self.label31 = ttk.Label(Frame2, text="R2", font="Arial 10 bold")
                self.label31.place(in_= Frame2, x=175, y=130) 
                self.entry31.place(in_= Frame2, x=210, y=130)
                
                self.label25 = ttk.Label(Frame2, text="C1", font="Arial 10 bold")
                self.label25.place(in_= Frame2, x=7, y=100) 
                self.entry25.place(in_= Frame2, x=50, y=100)
        
                self.label26 = ttk.Label(Frame2, text="C2", font="Arial 10 bold")
                self.label26.place(in_= Frame2, x=7, y=130) 
                self.entry26.place(in_= Frame2, x=50, y=130)
            
            elif filtertype == 2: #C1, R1, L1, C2
                filterselect = "Butterworth"
                filter_type=Label(root, text='Butterworth')
                filter_type.place(in_= Frame2, x=80, y=44)
                
                self.label27.config(text="    ")     #Remove C3
                self.entry27.place_forget()
                
                self.label31.config(text="    ")     #Remove R2
                self.entry31.place_forget()
                
                self.label32.config(text="    ")     #Remove R3
                self.entry32.place_forget()
                
                self.label25 = ttk.Label(Frame2, text="C1", font="Arial 10 bold")
                self.label25.place(in_= Frame2, x=7, y=100) 
                self.entry25.place(in_= Frame2, x=50, y=100)
        
                self.label26 = ttk.Label(Frame2, text="C2", font="Arial 10 bold")
                self.label26.place(in_= Frame2, x=7, y=130) 
                self.entry26.place(in_= Frame2, x=50, y=130)
                
                self.label30 = ttk.Label(Frame2, text="R1", font="Arial 10 bold") #
                self.label30.place(in_= Frame2, x=175, y=100) 
                self.entry30.place(in_= Frame2, x=210, y=100)
        
                self.label28 = ttk.Label(Frame2, text="L1", font="Arial 10 bold")
                self.label28.place(in_= Frame2, x=7, y=190) 
                self.entry28.place(in_= Frame2, x=50, y=190)
        
            elif filtertype == 3:  #C1, C2, R2, C3, R3
                filterselect = "Active C"
                filter_type=Label(root, text='Active C      ')
                filter_type.place(in_= Frame2, x=80, y=44)
                
                self.label28.config(text="    ")     #Remove L1
                self.entry28.place_forget()
                
                self.label30.config(text="    ")     #Remove R1
                self.entry30.place_forget()
                
                self.label25 = ttk.Label(Frame2, text="C1", font="Arial 10 bold")
                self.label25.place(in_= Frame2, x=7, y=100) 
                self.entry25.place(in_= Frame2, x=50, y=100)
        
                self.label26 = ttk.Label(Frame2, text="C2", font="Arial 10 bold")
                self.label26.place(in_= Frame2, x=7, y=130) 
                self.entry26.place(in_= Frame2, x=50, y=130)
                
                self.label31 = ttk.Label(Frame2, text="R2", font="Arial 10 bold")
                self.label31.place(in_= Frame2, x=175, y=130) 
                self.entry31.place(in_= Frame2, x=210, y=130)
                
                self.label32 = ttk.Label(Frame2, text="R3", font="Arial 10 bold") #
                self.label32.place(in_= Frame2, x=175, y=160) 
                self.entry32.place(in_= Frame2, x=210, y=160)
                
                self.label27 = ttk.Label(Frame2, text="C3", font="Arial 10 bold") #
                self.label27.place(in_= Frame2, x=7, y=160) 
                self.entry27.place(in_= Frame2, x=50, y=160)
                        
            else:
                filter_type=Label(root, text='None        ')
                filter_type.place(in_= Frame2, x=80, y=44)
                
        filterbox()
            
            
        label38 = ttk.Label(master, text="3dB Bandwidth", font="Arial 10 bold")
        label38.place(in_= Frame2, x=50, y=250) 
        self.entry38 = Entry(Frame2, width=15)
        self.entry38.place(in_= Frame2, x=210, y=250)
        
        label39 = ttk.Label(master, text="Actual Phase Margin", font="Arial 10 bold")
        label39.place(in_= Frame2, x=50, y=280) 
        self.entry39 = Entry(Frame2, width=15)
        self.entry39.place(in_= Frame2, x=210, y=280)
        
        label40 = ttk.Label(Frame4, text="Time Domain Settling", font="Arial 10 bold")
        label40.place(in_= Frame4, x=40, y=10)
        
        label41 = ttk.Label(Frame4, text="±Hz", font="Arial 10 bold")
        label41.place(in_= Frame4, x=135, y=40)
        self.entry41 = Entry(Frame4, width=8)
        self.entry41.place(in_= Frame4, x=75, y=40)
        
        label42 = ttk.Label(Frame4, text="±Degrees", font="Arial 10 bold")
        label42.place(in_= Frame4, x=135, y=70)
        self.entry42 = Entry(Frame4, width=8)
        self.entry42.place(in_= Frame4, x=75, y=70)
        
        label43 = ttk.Label(Frame4, text="Select Plot Type", font="Arial 10 bold")
        label43.place(in_= Frame4, x=60, y=100)
        
        plotType=['Open Loop Response','Close Loop Response','Loop Filter Response','Reference Phase Noise',
        'Phase Detector Noise','VCO Phase Noise','Closed Loop Modulated Filter Noise',
        'N Divider Phase Noise','Delta Sigma Noise','Open Loop Phase Noise Overalay',
        'Composite Phase Noise','All Noise Contributors','Time Domain Response',
        'Frequency Error Response','Time Domain Phase Settling','Percentage Noise Contributions',
        'High-Passed Phase Noise']
        option_select=StringVar(root)
        option_select.set("Open Loop Response")
        drop2=OptionMenu(root,option_select,*plotType)
        drop2.place(in_= Frame4, x=7, y=125)  
        drop2.config(font=('Arial 10 bold'),bg='white',width=25)
        drop2['menu'].config(font=('Arial 10 bold'),bg='white')

        label44 = ttk.Label(Frame4, text="Frequency Reponse Scale", font="Arial 10 bold")
        label44.place(in_= Frame4, x=35, y=170)
        
        label45 = ttk.Label(Frame4, text="fmin", font="Arial 10 bold")
        label45.place(in_= Frame4, x=45, y=200)
        self.entry45 = Entry(Frame4, width=8)
        self.entry45.place(in_= Frame4, x=90, y=200)
        
        label46 = ttk.Label(Frame4, text="fmax", font="Arial 10 bold")
        label46.place(in_= Frame4, x=45, y=230)
        self.entry46 = Entry(Frame4, width=8)
        self.entry46.place(in_= Frame4, x=90, y=230)
        
        label47 = ttk.Label(Frame4, text="Ymin", font="Arial 10 bold")
        label47.place(in_= Frame4, x=45, y=260)
        self.entry47 = Entry(Frame4, width=8)
        self.entry47.place(in_= Frame4, x=90, y=260)
        
        label48 = ttk.Label(Frame4, text="Ymax", font="Arial 10 bold")
        label48.place(in_= Frame4, x=45, y=290)
        self.entry48 = Entry(Frame4, width=8)
        self.entry48.place(in_= Frame4, x=90, y=290)
        
        paramMenu=['GHz','MHz','kHz']
        option_select=StringVar(root)
        option_select.set("GHz")
        drop3=OptionMenu(root,option_select,*paramMenu)
        drop3.place(in_=Frame4,x=150,y=200)   
        drop3.config(font=('Arial 6 bold'),bg='white',width=3)
        drop3['menu'].config(font=('Arial 6 bold'),bg='white') 
        
        paramMenu=['GHz','MHz','kHz']
        option_select=StringVar(root)
        option_select.set("GHz")
        drop3=OptionMenu(root,option_select,*paramMenu)
        drop3.place(in_=Frame4,x=150,y=230)   
        drop3.config(font=('Arial 6 bold'),bg='white',width=3)
        drop3['menu'].config(font=('Arial 6 bold'),bg='white') 

        scale_button = Button(Frame4, text="Set Scale", bg="white",font="Arial 10 bold", command=master.destroy)
        scale_button.place(in_=Frame4,x=84,y=320)
        
        exportPlot_button = Button(Frame4, text="Export Plot", bg="white",font="Arial 10 bold", command=master.destroy)
        exportPlot_button.place(in_=Frame4,x=80,y=370)
        
        exportData_button = Button(Frame4, text="Export Data", bg="white",font="Arial 10 bold", command=master.destroy)
        exportData_button.place(in_=Frame4,x=78,y=400)

        label49 = ttk.Label(Frame3, text="Loop Parameters", font="Arial 12 bold")
        label49.place(in_=Frame3,x=80,y=0)
        
        paramMenu=['PLL Parameters','Integrated Noise: VCO','Time Domain Parameters']
        option_select=StringVar(root)
        option_select.set("PLL Parameters")
        drop3=OptionMenu(root,option_select,*paramMenu)
        drop3.place(in_=Frame3,x=20,y=25)   
        drop3.config(font=('Arial 10 bold'),bg='white',width=30)
        drop3['menu'].config(font=('Arial 10 bold'),bg='white') 

        output1 = ttk.Label(Frame3, text="Results 1:", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=60)
        output1 = ttk.Label(Frame3, text="Results 2:", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=80)       
        
        f = Figure(figsize=(0,0))
        a = f.add_subplot(111)
        a.set_xscale('log')
        a.grid(b=True, which='minor', color='gray', linestyle='--')
        t = [10000,1000,100,10,1]
        s = [40,20,10,5,3 ]
        a.set_title ("My Plot Title", fontsize=10)
        a.set_ylabel("Y-Axis Title", fontsize=10)
        a.set_xlabel("Frequency", fontsize=10)
        a.plot(t,s, lw=1, color = 'blue', label ="my line")
        dataPlot = FigureCanvasTkAgg(f, self.master)
        dataPlot.show()
        dataPlot.get_tk_widget().grid(row=18, column=1, sticky=N+W+E+S, columnspan=23,rowspan=23)
        a.legend(loc='upper right', bbox_to_anchor=(1.1, 1.05),fancybox=True, shadow=True, ncol=1).draggable()
      
        compute_button = Button(master, text="Compute", bg="white",font="Arial 10 bold", command=master.destroy)
        compute_button.grid(row=41, column=48) 


    def load(self):
        root = Toplevel(self.master)
        root.geometry("450x235")
        
        root.title("Double Click to Select Input")
        #global filtertype
        #global filterbox
        def load_filterbox():
            if filtertype == 1:  #C1, C2, R2
                
                self.entry25.config(state='normal')             #C1
                self.entry25.delete(0, END)
                self.entry25.insert(0, self.input425)
                self.entry25.config(state='disabled')
                
                self.entry26.config(state='normal')              #C2
                self.entry26.delete(0, END)
                self.entry26.insert(0, self.input426)
                self.entry26.config(state='disabled')
                
                self.entry31.config(state='normal')              #R2
                self.entry31.delete(0, END)
                self.entry31.insert(0, self.input431)
                self.entry31.config(state='disabled')
                
            elif filtertype == 2: #C1, R1, L1, C2 Butterworth

                self.entry25.config(state='normal')              #C1
                self.entry25.delete(0, END)
                self.entry25.insert(0, self.input425)
                self.entry25.config(state='disabled')
                
                self.entry26.config(state='normal')              #C2
                self.entry26.delete(0, END)
                self.entry26.insert(0, self.input426)
                self.entry26.config(state='disabled')
                
                self.entry30.config(state='normal')              #R1
                self.entry30.delete(0, END)
                self.entry30.insert(0, self.input430)
                self.entry30.config(state='disabled')
                
                self.entry28.config(state='normal')              #L1
                self.entry28.delete(0, END)
                self.entry28.insert(0, self.input428)
                self.entry28.config(state='disabled') 
                
            else: #filtertype == 3:  #C1, C2, R2, C3, R3

                self.entry25.config(state='normal')              #C1
                self.entry25.delete(0, END)
                self.entry25.insert(0, self.input425)
                self.entry25.config(state='disabled')
                
                self.entry26.config(state='normal')              #C2
                self.entry26.delete(0, END)
                self.entry26.insert(0, self.input426)
                self.entry26.config(state='disabled')
                
                self.entry31.config(state='normal')              #R2
                self.entry31.delete(0, END)
                self.entry31.insert(0, self.input431)
                self.entry31.config(state='disabled')
                
                self.entry27.config(state='normal')              #C3
                self.entry27.delete(0, END)
                self.entry27.insert(0, self.input427)
                self.entry27.config(state='disabled')
                
                self.entry32.config(state='normal')              #R3
                self.entry32.delete(0, END)
                self.entry32.insert(0, self.input432)
                self.entry32.config(state='disabled')
        
        def ensure_dir(self, f):
            if not os.path.exists(f):
                os.makedirs(f)
                
        def load_from_csv(self, name='test'):  #Not sure how to make this load the value selected
            string = "%s.csv" % name
            my_data = genfromtxt(string, delimiter=',') #dtype=str
            return my_data
        
        def loadbutton():
            global loadedvalues
            global filtertype
            global filterbox
            loadedvalues= load_from_csv(self.selected_file)
            
            self.entry1.delete(0, END)
            self.entry1.insert(0, loadedvalues[0])
            self.entry2.delete(0, END)
            self.entry2.insert(0, loadedvalues[1])
            self.entry3.delete(0, END)
            self.entry3.insert(0, loadedvalues[2])
            self.entry4.delete(0, END)
            self.entry4.insert(0, loadedvalues[3])
            self.entry5.delete(0, END)
            self.entry5.insert(0, loadedvalues[4])
            self.entry6.delete(0, END)
            self.entry6.insert(0, loadedvalues[5])
            self.entry7.delete(0, END)
            self.entry7.insert(0, loadedvalues[6])
            self.entry8.delete(0, END)
            self.entry8.insert(0, loadedvalues[7])
            self.entry9.delete(0, END)
            self.entry9.insert(0, loadedvalues[8])
            self.entry10.delete(0, END)
            self.entry10.insert(0, loadedvalues[9])
            dropx = loadedvalues[10]
            
            if dropx == 0:
                self.option_select1.set('GHz')
            elif dropx == 1:
                self.option_select1.set('MHz')
            else:
                self.option_select1.set('kHz')
            self.entry12.delete(0, END)
            self.entry12.insert(0, loadedvalues[11])
            self.entry13.delete(0, END)
            self.entry13.insert(0, loadedvalues[12])
            self.entry14.delete(0, END)
            self.entry14.insert(0, loadedvalues[13])
            dropx = loadedvalues[14]
            if dropx == 0:
                self.option_select2.set('GHz')
            elif dropx == 1:
                self.option_select2.set('MHz')
            else:
                self.option_select2.set('kHz')
                
            dropx = loadedvalues[15]
            if dropx == 0:
                self.option_select3.set('GHz')
            elif dropx == 1:
                self.option_select3.set('MHz')
            else:
                self.option_select3.set('kHz')
            self.entry17.delete(0, END)
            self.entry17.insert(0, loadedvalues[16])
            self.entry18.delete(0, END)
            self.entry18.insert(0, loadedvalues[17])
            self.entry19.delete(0, END)
            self.entry19.insert(0, loadedvalues[18])
            self.entry20.delete(0, END)
            self.entry20.insert(0, loadedvalues[19])
            dropx = loadedvalues[20]
            if dropx == 0:
                self.option_select4.set('GHz')
            elif dropx == 1:
                self.option_select4.set('MHz')
            else:
                self.option_select4.set('kHz')
                
            dropx = loadedvalues[21]
            if dropx == 0:
                self.option_select5.set('GHz')
            elif dropx == 1:
                self.option_select5.set('MHz')
            else:
                self.option_select5.set('kHz')
                
            self.entry23.delete(0, END)
            self.entry23.insert(0, loadedvalues[22])
            self.entry24.delete(0, END)
            self.entry24.insert(0, loadedvalues[23])
            dropx = loadedvalues[24]
            if dropx == 0:
                self.option_select6.set('GHz')
            elif dropx == 1:
                self.option_select6.set('MHz')
            else:
                self.option_select6.set('kHz')
            dropx = loadedvalues[25]
            if dropx == 0:
                self.option_select10.set('Frequency Step')
            elif dropx == 1:
                self.option_select10.set('Frequency Sweep')
            else:
                self.option_select10.set('Phase Step')
            filtertype = loadedvalues[26]
            self.entry38.delete(0, END)
            self.entry38.insert(0, loadedvalues[27])
            self.entry39.delete(0, END)
            self.entry39.insert(0, loadedvalues[28])
            self.entry41.delete(0, END)
            self.entry41.insert(0, loadedvalues[29])
            self.entry42.delete(0, END)
            self.entry42.insert(0, loadedvalues[30])
            self.entry45.delete(0, END)
            self.entry45.insert(0, loadedvalues[31])
            self.entry46.delete(0, END)
            self.entry46.insert(0, loadedvalues[32])
            self.entry47.delete(0, END)
            self.entry47.insert(0, loadedvalues[33])
            self.entry48.delete(0, END)
            self.entry48.insert(0, loadedvalues[34])
            self.input417 = loadedvalues[35]
            self.input418 = loadedvalues[36]
            self.input419 = loadedvalues[37]
            self.input420 = loadedvalues[38]
            self.input421 = loadedvalues[39]
            self.input422 = loadedvalues[40]
            self.input423 = loadedvalues[41]
            self.input424 = loadedvalues[42]
            self.input425 = loadedvalues[43]
            self.input426 = loadedvalues[44]
            self.input427 = loadedvalues[45]
            self.input428 = loadedvalues[46]
            self.input430 = loadedvalues[47]
            self.input431 = loadedvalues[48]
            self.input432 = loadedvalues[49]
            self.input435 = loadedvalues[50]
            self.input436 = loadedvalues[51]
            self.input437 = loadedvalues[52]
            self.input438 = loadedvalues[53]
            self.input439 = loadedvalues[54]
            

            filterbox()
            load_filterbox()
            root.destroy()
            
        def Double(event):
            widget = event.widget
            selection = [0]
            selection = widget.curselection()[0]
            self.selected_file = widget.get(selection)
            self.selected_file_label.config(text='Selected: %s' % (self.selected_file))

        self.selected_file = ""
        os.chdir(os.path.join(os.getenv('userprofile'), 'Desktop'))  # change the current directory to desktop
        os.chdir('GD PLL Design Tool')  # change the cuurent dir

        select_formular_button = Button(root, text='Load', width=7, command=loadbutton)
        select_formular_button.place(in_=root, x=150, y=200)
        select_formular_button = Button(root, text='Cancel', width=7, command=root.destroy)
        select_formular_button.place(in_=root, x=225, y=200)

        self.selected_file_label = Label(root, text='Selected: %s' % (self.selected_file), background='white', font=(12))


        self.selected_file_label.grid(row=1, column=0, columnspan=6)

        # scrollbar for this grid()
        scrollbar = Scrollbar(root)
        scrollbar.grid(sticky=E, row=0, column=11, rowspan=10, ipady=80)

        # This is the list box that contains all the csv files inside formular list dir:
        self.listbox = Listbox(root, width=70)
        self.listbox.grid(row=2, column=0, columnspan=6)

        # make this become a def so that you can recall it everytime to finish create, update or rename
        self.listFileNames = os.listdir('.')  # put all the file name in the filenames array
        for fileName in self.listFileNames:
            if ".csv" in fileName:
                self.listbox.insert(0, fileName)

        self.listbox.bind("<Double-Button-1>", Double)
        self.listbox.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.listbox.yview)
        
        
    def save(self):
        #root = Toplevel(self.master)
        #root.geometry("400x400")
        global array
        
        def save_to_csv(array, name='test'):
            # load an array from given name .csv file into certain array
            a = np.asarray(array)
            string = "%s.csv" % name
            a.tofile(string, sep=',')
        
        os.chdir(os.path.join(os.getenv('userprofile'), 'Desktop'))
        os.chdir('GD PLL Design Tool')
        
        array[0] = self.entry1.get()
        array[1] = self.entry2.get()
        array[2] = self.entry3.get()
        array[3] = self.entry4.get()
        array[4] = self.entry5.get()
        array[5] = self.entry6.get()
        array[6] = self.entry7.get()
        array[7] = self.entry8.get()
        array[8] = self.entry9.get()
        array[9] = self.entry10.get()
        #array[10] = self.drop1
        if self.option_select1 == 'GHz':
            array[10] = 0
        elif self.option_select1 == 'MHz':
            array[10] = 1
        else:
            array[10] = 2
        array[11] = self.entry12.get()
        array[12] = self.entry13.get()
        array[13] = self.entry14.get()
        if self.option_select2 == 'GHz':
            array[14] = 0
        elif self.option_select2 == 'MHz':
            array[14] = 1
        else:
            array[14] = 2
        if self.option_select3 == 'GHz':
            array[15] = 0
        elif self.option_select3 == 'MHz':
            array[15] = 1
        else:
            array[15] = 2
        array[16] = self.entry17.get()
        array[17] = self.entry18.get()
        array[18] = self.entry19.get()
        array[19] = self.entry20.get()
        if self.option_select4 == 'GHz':
            array[20] = 0
        elif self.option_select4 == 'MHz':
            array[20] = 1
        else:
            array[20] = 2
        if self.option_select5 == 'GHz':
            array[21] = 0
        elif self.option_select5 == 'MHz':
            array[21] = 1
        else:
            array[21] = 2
        array[22] = self.entry23.get()
        array[23] = self.entry24.get()
        if self.option_select6 == 'GHz':
            array[24] = 0
        elif self.option_select6 == 'MHz':
            array[24] = 1
        else:
            array[24] = 2
        if self.option_select10 == "Frequency Step":
            array[25] = 0
        elif self.option_select10 == "Frequency Sweep":
            array[25] = 1
        else:
            array[25] = 2
        array[26] = filtertype  #loads the filter type
        array[27] = self.entry38.get()
        array[28] = self.entry39.get()
        array[29] = self.entry41.get()
        array[30] = self.entry42.get()
        array[31] = self.entry45.get()
        array[32] = self.entry46.get()
        array[33] = self.entry47.get()
        array[34] = self.entry48.get()
        array[35] = self.input417
        array[36] = self.input418
        array[37] = self.input419
        array[38] = self.input420
        array[39] = self.input421
        array[40] = self.input422
        array[41] = self.input423
        array[42] = self.input424
        array[43] = self.input425
        array[44] = self.input426
        array[45] = self.input427
        array[46] = self.input428
        array[47] = self.input430
        array[48] = self.input431
        array[49] = self.input432
        array[50] = self.input435
        array[51] = self.input436
        array[52] = self.input437
        array[53] = self.input438
        array[54] = self.input439
        
        
        # a window pop up asking: pls input a new name
        var = tkinter.simpledialog.askstring("Name prompt", "Save your input as")
        # use save_to_csv to save current input into a new csv file
        if var is not None:
            save_to_csv(array, var)
        
        
        
    def new_window1(self):
        root = Toplevel(self.master)
        root.geometry("1000x550")
        global noise
        global last_noise
        global noise_array
        global temp_noise_array
        global change_noise
        
        def apply_noise():
            change_noise()
            noise_array[:] = temp_noise_array[:]
            
        def save_noise():
            apply_noise()
            root.destroy()
        
        temp_noise_array[:] = noise_array[:]
        noise = 1
        
        Noise_OK_button = Button(root, text="OK", bg="white",font="Arial 10 bold", width=10, command=save_noise)
        Noise_OK_button.place(x=350, y=500)
        
        Noise_Apply_button = tk.Button(root, text="Apply", bg="white",font="Arial 10 bold", width=10, command=apply_noise)#, command=return_filter) #, command=root.destroy)
        Noise_Apply_button.place(x=470, y=500)
        
        Noise_Cancel_button = Button(root, text="Cancel", bg="white",font="Arial 10 bold", width=10, command=root.destroy)
        Noise_Cancel_button.place(x=590, y=500)
        
        label41 = ttk.Label(root, text=" ", font="Arial 10 bold")
        label41.grid(row=1, column=1,columnspan=1, sticky=W) 
        label41 = ttk.Label(root, text="   ", font="Arial 10 bold")
        label41.grid(row=2, column=1,columnspan=1, sticky=W)
        label41 = ttk.Label(root, text="   ", font="Arial 10 bold")
        label41.grid(row=2, column=4,columnspan=1, sticky=W)
        
        Frame1 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=300, height=450, bd=0)
        Frame1.grid(row = 2, column =2, rowspan = 2, columnspan = 2, sticky = W+E+N+S)
        
        Frame2 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=600, height=450, bd=0)
        Frame2.grid(row = 2, column =5, rowspan = 2, columnspan = 2, sticky = W+E+N+S) 
        
        def change_noise():
            global noise
            global temp_noise_array
        
            if noise == 1:
                temp_noise_array[0] = self.entry102.get()
                temp_noise_array[1] = self.entry103.get()
                temp_noise_array[2] = self.entry104.get()
                temp_noise_array[3] = self.entry105.get()
                temp_noise_array[4] = self.entry106.get()
                temp_noise_array[5] = self.entry107.get()
                temp_noise_array[6] = self.entry108.get()
                temp_noise_array[7] = self.entry110.get()
                temp_noise_array[8] = self.entry111.get()
                temp_noise_array[9] = self.entry112.get()
                temp_noise_array[10] = self.entry113.get()
                temp_noise_array[11] = self.entry114.get()
                temp_noise_array[12] = self.entry115.get()
                temp_noise_array[13] = self.entry116.get()
                temp_noise_array[14] = self.entry118.get()
                
            elif noise == 2:
                temp_noise_array[15] = self.entry119.get()
                temp_noise_array[16] = self.entry120.get()
                temp_noise_array[17] = self.entry121.get()
                temp_noise_array[18] = self.entry122.get()
                temp_noise_array[19] = self.entry123.get()
                temp_noise_array[20] = self.entry124.get()
                temp_noise_array[21] = self.entry125.get()
                temp_noise_array[22] = self.entry127.get()
                temp_noise_array[23] = self.entry128.get()
                temp_noise_array[24] = self.entry129.get()
                temp_noise_array[25] = self.entry130.get()
                temp_noise_array[26] = self.entry131.get()
                temp_noise_array[27] = self.entry132.get()
                temp_noise_array[28] = self.entry133.get()
                temp_noise_array[29] = self.entry135.get()
                temp_noise_array[30] = self.entry136.get()
                temp_noise_array[31] = self.entry137.get()
                temp_noise_array[32] = self.entry138.get()
                temp_noise_array[33] = self.entry139.get()
                temp_noise_array[34] = self.entry140.get()
                temp_noise_array[35] = self.entry141.get()
                temp_noise_array[36] = self.entry143.get()
            elif noise == 3:
                temp_noise_array[37] = self.entry144.get()
                temp_noise_array[38] = self.entry146.get()
                temp_noise_array[39] = self.entry147.get()
                temp_noise_array[40] = self.entry148.get()
                temp_noise_array[41] = self.entry149.get()
                temp_noise_array[42] = self.entry150.get()
                temp_noise_array[43] = self.entry151.get()
                temp_noise_array[44] = self.entry152.get()
                temp_noise_array[45] = self.entry154.get()
                temp_noise_array[46] = self.entry155.get()
                temp_noise_array[47] = self.entry156.get()
                temp_noise_array[48] = self.entry157.get()
                temp_noise_array[49] = self.entry158.get()
                temp_noise_array[50] = self.entry159.get()
                temp_noise_array[51] = self.entry160.get()
                temp_noise_array[52] = self.entry162.get()
                temp_noise_array[53] = self.entry163.get()
                temp_noise_array[54] = self.entry164.get()
                temp_noise_array[55] = self.entry165.get()
                temp_noise_array[56] = self.entry166.get()
                temp_noise_array[57] = self.entry167.get()
                temp_noise_array[58] = self.entry168.get()
                temp_noise_array[59] = self.entry169.get()
                temp_noise_array[60] = self.entry170.get()
                temp_noise_array[61] = self.entry171.get()
                temp_noise_array[62] = self.entry172.get()
                temp_noise_array[63] = self.entry173.get()
                temp_noise_array[64] = self.entry174.get()
                temp_noise_array[65] = self.entry175.get()
                temp_noise_array[66] = self.entry176.get()
                temp_noise_array[67] = self.entry178.get()
                temp_noise_array[68] = self.entry179.get()
                temp_noise_array[69] = self.entry180.get()
                temp_noise_array[70] = self.entry181.get()
                temp_noise_array[71] = self.entry182.get()
                temp_noise_array[72] = self.entry183.get()
                temp_noise_array[73] = self.entry184.get()
                temp_noise_array[74] = self.entry185.get()
                temp_noise_array[75] = self.entry187.get()
                temp_noise_array[76] = self.entry188.get()
                temp_noise_array[77] = self.entry189.get()
                temp_noise_array[78] = self.entry190.get()
                temp_noise_array[79] = self.entry191.get()
                temp_noise_array[80] = self.entry192.get()
                temp_noise_array[81] = self.entry193.get()
                temp_noise_array[82] = self.entry194.get()
                temp_noise_array[83] = self.entry195.get()
                temp_noise_array[84] = self.entry196.get()
                
            elif noise == 4:
                temp_noise_array[85] = self.entry197.get()
                temp_noise_array[86] = self.entry199.get()
                temp_noise_array[87] = self.entry200.get()
                temp_noise_array[88] = self.entry201.get()
                temp_noise_array[89] = self.entry202.get()
                temp_noise_array[90] = self.entry203.get()
                temp_noise_array[91] = self.entry204.get()
                temp_noise_array[92] = self.entry205.get()
                temp_noise_array[93] = self.entry207.get()
                temp_noise_array[94] = self.entry208.get()
                temp_noise_array[95] = self.entry209.get()
                temp_noise_array[96] = self.entry210.get()
                temp_noise_array[97] = self.entry211.get()
                temp_noise_array[98] = self.entry212.get()
                temp_noise_array[99] = self.entry213.get()
                temp_noise_array[100] = self.entry215.get()
                temp_noise_array[101] = self.entry216.get()
                temp_noise_array[102] = self.entry217.get()
                temp_noise_array[103] = self.entry218.get()
                temp_noise_array[104] = self.entry219.get()
                temp_noise_array[105] = self.entry220.get()
                temp_noise_array[106] = self.entry221.get()
                temp_noise_array[107] = self.entry223.get()
                temp_noise_array[108] = self.entry224.get()
                temp_noise_array[109] = self.entry225.get()
                temp_noise_array[110] = self.entry226.get()
                temp_noise_array[111] = self.entry227.get()
                temp_noise_array[112] = self.entry228.get()
                temp_noise_array[113] = self.entry229.get()
                temp_noise_array[114] = self.entry230.get()
                temp_noise_array[115] = self.entry231.get()
                temp_noise_array[116] = self.entry232.get()
                temp_noise_array[117] = self.entry233.get()
                temp_noise_array[118] = self.entry234.get()
                temp_noise_array[119] = self.entry235.get()
                temp_noise_array[120] = self.entry236.get()
                temp_noise_array[121] = self.entry237.get()
                temp_noise_array[122] = self.entry238.get()
                temp_noise_array[123] = self.entry239.get()
                temp_noise_array[124] = self.entry240.get()
                temp_noise_array[125] = self.entry241.get()
                temp_noise_array[126] = self.entry242.get()
                temp_noise_array[127] = self.entry243.get()
                temp_noise_array[128] = self.entry244.get()
                temp_noise_array[129] = self.entry245.get()
                temp_noise_array[130] = self.entry246.get()
                temp_noise_array[131] = self.entry247.get()
                temp_noise_array[132] = self.entry248.get()
                temp_noise_array[133] = self.entry249.get()
                temp_noise_array[134] = self.entry250.get()
                temp_noise_array[135] = self.entry251.get()
                temp_noise_array[136] = self.entry252.get()
                temp_noise_array[137] = self.entry253.get()
                temp_noise_array[138] = self.entry254.get()
                temp_noise_array[139] = self.entry255.get()
                
            elif noise == 5:
                temp_noise_array[140] = self.entry256.get()
                temp_noise_array[141] = self.entry257.get()
                temp_noise_array[142] = self.entry258.get()
                temp_noise_array[143] = self.entry259.get()
                temp_noise_array[144] = self.entry260.get()
                temp_noise_array[145] = self.entry261.get()
                temp_noise_array[146] = self.entry262.get()
                temp_noise_array[147] = self.entry263.get()
                temp_noise_array[148] = self.entry264.get()
                temp_noise_array[149] = self.entry265.get()
                temp_noise_array[150] = self.entry266.get()
                temp_noise_array[151] = self.entry267.get()
                temp_noise_array[152] = self.entry268.get()
                temp_noise_array[153] = self.entry269.get()
                temp_noise_array[154] = self.entry270.get()
                temp_noise_array[155] = self.entry271.get()
                
            elif noise == 6:
                temp_noise_array[156] = self.entry272.get()
                temp_noise_array[157] = self.entry273.get()
                temp_noise_array[158] = self.entry274.get()
                temp_noise_array[159] = self.entry275.get()
                temp_noise_array[160] = self.entry276.get()
                temp_noise_array[161] = self.entry277.get()
                temp_noise_array[162] = self.entry278.get()
                temp_noise_array[163] = self.entry279.get()
                temp_noise_array[164] = self.entry280.get()
                temp_noise_array[165] = self.entry281.get()
                temp_noise_array[166] = self.entry282.get()
                temp_noise_array[167] = self.entry283.get()
                temp_noise_array[168] = self.entry284.get()
                temp_noise_array[169] = self.entry285.get()
                temp_noise_array[170] = self.entry286.get()
                temp_noise_array[171] = self.entry287.get()
                temp_noise_array[172] = self.entry288.get()
                temp_noise_array[173] = self.entry289.get()
                temp_noise_array[174] = self.entry290.get()
                temp_noise_array[175] = self.entry291.get()
                temp_noise_array[176] = self.entry292.get()
                temp_noise_array[177] = self.entry293.get()
                temp_noise_array[178] = self.entry294.get()
                temp_noise_array[179] = self.entry295.get()
                temp_noise_array[180] = self.entry296.get()
                temp_noise_array[181] = self.entry297.get()
                temp_noise_array[182] = self.entry298.get()
                temp_noise_array[183] = self.entry299.get()
                temp_noise_array[184] = self.entry300.get()
                temp_noise_array[185] = self.entry301.get()
                temp_noise_array[186] = self.entry302.get()
                temp_noise_array[187] = self.entry303.get()
                temp_noise_array[188] = self.entry304.get()
                temp_noise_array[189] = self.entry305.get()
                temp_noise_array[190] = self.entry306.get()
                temp_noise_array[191] = self.entry307.get()
                temp_noise_array[192] = self.entry308.get()
                temp_noise_array[193] = self.entry309.get()
                temp_noise_array[194] = self.entry310.get()
                temp_noise_array[195] = self.entry311.get()
                temp_noise_array[196] = self.entry312.get()
                temp_noise_array[197] = self.entry313.get()
                
            elif noise == 7:
                temp_noise_array[198] = self.entry314.get()
                
            elif noise == 8:
                temp_noise_array[199] = self.entry315.get()
                temp_noise_array[200] = self.entry316.get()
                temp_noise_array[201] = self.entry317.get()
                temp_noise_array[202] = self.entry318.get()
                temp_noise_array[203] = self.entry319.get()
                temp_noise_array[204] = self.entry320.get()
                temp_noise_array[205] = self.entry321.get()
                temp_noise_array[206] = self.entry322.get()
                temp_noise_array[207] = self.entry323.get()
                temp_noise_array[208] = self.entry324.get()
                temp_noise_array[209] = self.entry325.get()
                temp_noise_array[210] = self.entry326.get()
                temp_noise_array[211] = self.entry327.get()
                temp_noise_array[212] = self.entry328.get()
                temp_noise_array[213] = self.entry329.get()
                temp_noise_array[214] = self.entry330.get()
                temp_noise_array[215] = self.entry331.get()
                temp_noise_array[216] = self.entry332.get()
                temp_noise_array[217] = self.entry333.get()
                temp_noise_array[218] = self.entry334.get()
                temp_noise_array[219] = self.entry335.get()
                
            else:
                temp_noise_array[220] = self.entry336.get()
        
        def change_noise1():
            
            global change_noise
            global temp_noise_array
            global noise
            change_noise()    
            noise = 1
            
            Crystal_button.config(relief=SUNKEN)
            Reference_button.config(relief=RAISED)
            Phase_button.config(relief=RAISED)
            VCONoise_button.config(relief=RAISED)
            RFDivider_button.config(relief=RAISED)
            Operational_button.config(relief=RAISED)
            Delta_button.config(relief=RAISED)
            Composite_button.config(relief=RAISED)
            HighPass_button.config(relief=RAISED)
            
            Frame2 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=600, height=450, bd=0)
            Frame2.grid(row = 2, column =5, rowspan = 2, columnspan = 2, sticky = W+E+N+S)
            
            output101 = ttk.Label(Frame2, text="Frequency Offset", font="Arial 10 bold")
            output101.place(in_=Frame2,x=10,y=10)

            self.entry102 = Entry(Frame2, width=6)
            self.entry102.place(in_=Frame2, x=170, y=10)
            self.entry102.delete(0, END)
            self.entry102.insert(0, temp_noise_array[0])
        
            self.entry103 = Entry(Frame2, width=6)
            self.entry103.place(in_=Frame2, x=220, y=10)
            self.entry103.delete(0, END)
            self.entry103.insert(0, temp_noise_array[1])
            
            self.entry104 = Entry(Frame2, width=6)
            self.entry104.place(in_=Frame2, x=270, y=10)
            self.entry104.delete(0, END)
            self.entry104.insert(0, temp_noise_array[2])
            
            self.entry105 = Entry(Frame2, width=6)
            self.entry105.place(in_=Frame2, x=320, y=10)
            self.entry105.delete(0, END)
            self.entry105.insert(0, temp_noise_array[3])
            
            self.entry106 = Entry(Frame2, width=6)
            self.entry106.place(in_=Frame2, x=370, y=10)
            self.entry106.delete(0, END)
            self.entry106.insert(0, temp_noise_array[4])
            
            self.entry107 = Entry(Frame2, width=6)
            self.entry107.place(in_=Frame2, x=420, y=10)
            self.entry107.delete(0, END)
            self.entry107.insert(0, temp_noise_array[5])
            
            self.entry108 = Entry(Frame2, width=6)
            self.entry108.place(in_=Frame2, x=470, y=10)
            self.entry108.delete(0, END)
            self.entry108.insert(0, temp_noise_array[6])
            
            output109 = ttk.Label(Frame2, text="Hz", font="Arial 10 bold")
            output109.place(in_=Frame2,x=520,y=10)
            
            output110 = ttk.Label(Frame2, text="Crystal Oscillator Noise", font="Arial 10 bold")
            output110.place(in_=Frame2,x=10,y=40)
            
            self.entry110 = Entry(Frame2, width=6)
            self.entry110.place(in_=Frame2, x=170, y=40)
            self.entry110.delete(0, END)
            self.entry110.insert(0, temp_noise_array[7])
            
            self.entry111 = Entry(Frame2, width=6)
            self.entry111.place(in_=Frame2, x=220, y=40)
            self.entry111.delete(0, END)
            self.entry111.insert(0, temp_noise_array[8])
        
            self.entry112 = Entry(Frame2, width=6)
            self.entry112.place(in_=Frame2, x=270, y=40)
            self.entry112.delete(0, END)
            self.entry112.insert(0, temp_noise_array[9])
            
            self.entry113 = Entry(Frame2, width=6)
            self.entry113.place(in_=Frame2, x=320, y=40)
            self.entry113.delete(0, END)
            self.entry113.insert(0, temp_noise_array[10])
            
            self.entry114 = Entry(Frame2, width=6)
            self.entry114.place(in_=Frame2, x=370, y=40)
            self.entry114.delete(0, END)
            self.entry114.insert(0, temp_noise_array[11])
            
            self.entry115 = Entry(Frame2, width=6)
            self.entry115.place(in_=Frame2, x=420, y=40)
            self.entry115.delete(0, END)
            self.entry115.insert(0, temp_noise_array[12])
            
            self.entry116 = Entry(Frame2, width=6)
            self.entry116.place(in_=Frame2, x=470, y=40)
            self.entry116.delete(0, END)
            self.entry116.insert(0, temp_noise_array[13])
            
            output117 = ttk.Label(Frame2, text="dBc/Hz", font="Arial 10 bold")
            output117.place(in_=Frame2,x=520,y=40)
            
            output118 = ttk.Label(Frame2, text="Add / Subtract from Crystal Phase Noise?", font="Arial 10 bold")
            output118.place(in_=Frame2,x=10,y=70)
            
            self.entry118 = Entry(Frame2, width=6)
            self.entry118.place(in_=Frame2, x=470, y=70)
            self.entry118.delete(0, END)
            self.entry118.insert(0, temp_noise_array[14])
            
            output119 = ttk.Label(Frame2, text="dB", font="Arial 10 bold")
            output119.place(in_=Frame2,x=520,y=70)          
            
        def change_noise2():
            
            global noise
            global change_noise
            global temp_noise_array
            change_noise() 
            noise = 2
            
            Crystal_button.config(relief=RAISED)
            Reference_button.config(relief=SUNKEN)
            Phase_button.config(relief=RAISED)
            VCONoise_button.config(relief=RAISED)
            RFDivider_button.config(relief=RAISED)
            Operational_button.config(relief=RAISED)
            Delta_button.config(relief=RAISED)
            Composite_button.config(relief=RAISED)
            HighPass_button.config(relief=RAISED)
            
            Frame2 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=600, height=450, bd=0)
            Frame2.grid(row = 2, column =5, rowspan = 2, columnspan = 2, sticky = W+E+N+S)
            
            output1 = ttk.Label(Frame2, text="Frequency Offset", font="Arial 10 bold")
            output1.place(in_=Frame2,x=10,y=10)
            
            self.entry119 = Entry(Frame2, width=6)
            self.entry119.place(in_=Frame2, x=170, y=10)
            self.entry119.delete(0, END)
            self.entry119.insert(0, temp_noise_array[15])
        
            self.entry120 = Entry(Frame2, width=6)
            self.entry120.place(in_=Frame2, x=220, y=10)
            self.entry120.delete(0, END)
            self.entry120.insert(0, temp_noise_array[16])
            
            self.entry121 = Entry(Frame2, width=6)
            self.entry121.place(in_=Frame2, x=270, y=10)
            self.entry121.delete(0, END)
            self.entry121.insert(0, temp_noise_array[17])
            
            self.entry122 = Entry(Frame2, width=6)
            self.entry122.place(in_=Frame2, x=320, y=10)
            self.entry122.delete(0, END)
            self.entry122.insert(0, temp_noise_array[18])
            
            self.entry123 = Entry(Frame2, width=6)
            self.entry123.place(in_=Frame2, x=370, y=10)
            self.entry123.delete(0, END)
            self.entry123.insert(0, temp_noise_array[19])
            
            self.entry124 = Entry(Frame2, width=6)
            self.entry124.place(in_=Frame2, x=420, y=10)
            self.entry124.delete(0, END)
            self.entry124.insert(0, temp_noise_array[20])
        
            self.entry125 = Entry(Frame2, width=6)          #425
            self.entry125.place(in_=Frame2, x=470, y=10)
            self.entry125.delete(0, END)
            self.entry125.insert(0, temp_noise_array[21])
            
            output126 = ttk.Label(Frame2, text="Hz", font="Arial 10 bold")
            output126.place(in_=Frame2,x=520,y=10)
            
            output127 = ttk.Label(Frame2, text="Reference Buffer Noise", font="Arial 10 bold")
            output127.place(in_=Frame2,x=10,y=40)
            
            self.entry127 = Entry(Frame2, width=6)
            self.entry127.place(in_=Frame2, x=170, y=40)
            self.entry127.delete(0, END)
            self.entry127.insert(0, temp_noise_array[22])
            
            self.entry128 = Entry(Frame2, width=6)
            self.entry128.place(in_=Frame2, x=220, y=40)
            self.entry128.delete(0, END)
            self.entry128.insert(0, temp_noise_array[23])
        
            self.entry129 = Entry(Frame2, width=6)
            self.entry129.place(in_=Frame2, x=270, y=40)
            self.entry129.delete(0, END)
            self.entry129.insert(0, temp_noise_array[24])
            
            self.entry130 = Entry(Frame2, width=6)
            self.entry130.place(in_=Frame2, x=320, y=40)
            self.entry130.delete(0, END)
            self.entry130.insert(0, temp_noise_array[25])
            
            self.entry131 = Entry(Frame2, width=6)
            self.entry131.place(in_=Frame2, x=370, y=40)
            self.entry131.delete(0, END)
            self.entry131.insert(0, temp_noise_array[26])
            
            self.entry132 = Entry(Frame2, width=6)
            self.entry132.place(in_=Frame2, x=420, y=40)
            self.entry132.delete(0, END)
            self.entry132.insert(0, temp_noise_array[27])
            
            self.entry133 = Entry(Frame2, width=6)
            self.entry133.place(in_=Frame2, x=470, y=40)
            self.entry133.delete(0, END)
            self.entry133.insert(0, temp_noise_array[28])
            
            output134 = ttk.Label(Frame2, text="dBc/Hz", font="Arial 10 bold")
            output134.place(in_=Frame2,x=520,y=40)
            
            output135 = ttk.Label(Frame2, text="Referance Buffer Gain", font="Arial 10 bold")
            output135.place(in_=Frame2,x=10,y=70)
            
            self.entry135 = Entry(Frame2, width=6)
            self.entry135.place(in_=Frame2, x=170, y=70)
            self.entry135.delete(0, END)
            self.entry135.insert(0, temp_noise_array[29])
            
            self.entry136 = Entry(Frame2, width=6)
            self.entry136.place(in_=Frame2, x=220, y=70)
            self.entry136.delete(0, END)
            self.entry136.insert(0, temp_noise_array[30])
        
            self.entry137 = Entry(Frame2, width=6)
            self.entry137.place(in_=Frame2, x=270, y=70)
            self.entry137.delete(0, END)
            self.entry137.insert(0, temp_noise_array[31])
            
            self.entry138 = Entry(Frame2, width=6)
            self.entry138.place(in_=Frame2, x=320, y=70)
            self.entry138.delete(0, END)
            self.entry138.insert(0, temp_noise_array[32])
            
            self.entry139 = Entry(Frame2, width=6)
            self.entry139.place(in_=Frame2, x=370, y=70)
            self.entry139.delete(0, END)
            self.entry139.insert(0, temp_noise_array[33])
            
            self.entry140 = Entry(Frame2, width=6)
            self.entry140.place(in_=Frame2, x=420, y=70)
            self.entry140.delete(0, END)
            self.entry140.insert(0, temp_noise_array[34])
            
            self.entry141 = Entry(Frame2, width=6)
            self.entry141.place(in_=Frame2, x=470, y=70)
            self.entry141.delete(0, END)
            self.entry141.insert(0, temp_noise_array[35])
            
            output142 = ttk.Label(Frame2, text="dB", font="Arial 10 bold")
            output142.place(in_=Frame2,x=520,y=70)
            
            output143 = ttk.Label(Frame2, text="Reference Buffer Noise Offset", font="Arial 10 bold")
            output143.place(in_=Frame2,x=10,y=100)
            
            self.entry143 = Entry(Frame2, width=6)
            self.entry143.place(in_=Frame2, x=470, y=100)
            self.entry143.delete(0, END)
            self.entry143.insert(0, temp_noise_array[36])
            
            output144 = ttk.Label(Frame2, text="dB", font="Arial 10 bold")
            output144.place(in_=Frame2,x=520,y=100)
            
        def change_noise3():
            
            global noise
            global change_noise
            global temp_noise_array
            change_noise() 
            noise = 3
            
            Crystal_button.config(relief=RAISED)
            Reference_button.config(relief=RAISED)
            Phase_button.config(relief=SUNKEN)
            VCONoise_button.config(relief=RAISED)
            RFDivider_button.config(relief=RAISED)
            Operational_button.config(relief=RAISED)
            Delta_button.config(relief=RAISED)
            Composite_button.config(relief=RAISED)
            HighPass_button.config(relief=RAISED)
            
            Frame2 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=600, height=450, bd=0)
            Frame2.grid(row = 2, column =5, rowspan = 2, columnspan = 2, sticky = W+E+N+S)            
            
            output145 = ttk.Label(Frame2, text="Use Simple Phase Detector Model?", font="Arial 10 bold")
            output145.place(in_=Frame2,x=10,y=10)   
            
            check_var = IntVar()
            Checkbutton(root, variable=check_var).place(in_=Frame2, x=490, y=10)
            
            output146 = ttk.Label(Frame2, text="Phase Detector Noise Specification Frequency", font="Arial 10 bold")
            output146.place(in_=Frame2,x=10,y=40)
            
            self.entry144 = Entry(Frame2, width=6)
            self.entry144.place(in_=Frame2, x=470, y=40)
            self.entry144.delete(0, END)
            self.entry144.insert(0, temp_noise_array[37])
            
            output147 = ttk.Label(Frame2, text="Hz", font="Arial 10 bold")
            output147.place(in_=Frame2,x=520,y=40)
            
            output1 = ttk.Label(Frame2, text="Frequency Offset", font="Arial 10 bold")
            output1.place(in_=Frame2,x=10,y=70)
            
            self.entry146 = Entry(Frame2, width=6)
            self.entry146.place(in_=Frame2, x=170, y=70)
            self.entry146.delete(0, END)
            self.entry146.insert(0, temp_noise_array[38])
            
            self.entry147 = Entry(Frame2, width=6)
            self.entry147.place(in_=Frame2, x=220, y=70)
            self.entry147.delete(0, END)
            self.entry147.insert(0, temp_noise_array[39])
            
            self.entry148 = Entry(Frame2, width=6)
            self.entry148.place(in_=Frame2, x=270, y=70)
            self.entry148.delete(0, END)
            self.entry148.insert(0, temp_noise_array[40])
            
            self.entry149 = Entry(Frame2, width=6)
            self.entry149.place(in_=Frame2, x=320, y=70)
            self.entry149.delete(0, END)
            self.entry149.insert(0, temp_noise_array[41])
            
            self.entry150 = Entry(Frame2, width=6)
            self.entry150.place(in_=Frame2, x=370, y=70)
            self.entry150.delete(0, END)
            self.entry150.insert(0, temp_noise_array[42])
            
            self.entry151 = Entry(Frame2, width=6)
            self.entry151.place(in_=Frame2, x=420, y=70)
            self.entry151.delete(0, END)
            self.entry151.insert(0, temp_noise_array[43])
            
            self.entry152 = Entry(Frame2, width=6)
            self.entry152.place(in_=Frame2, x=470, y=70)
            self.entry152.delete(0, END)
            self.entry152.insert(0, temp_noise_array[44])
            
            output153 = ttk.Label(Frame2, text="dB", font="Arial 10 bold")
            output153.place(in_=Frame2,x=520,y=70)
            
            output154 = ttk.Label(Frame2, text="Supply Noise", font="Arial 10 bold")
            output154.place(in_=Frame2,x=10,y=100)
            
            self.entry154 = Entry(Frame2, width=6)
            self.entry154.place(in_=Frame2, x=170, y=100)
            self.entry154.delete(0, END)
            self.entry154.insert(0, temp_noise_array[45])
            
            self.entry155 = Entry(Frame2, width=6)
            self.entry155.place(in_=Frame2, x=220, y=100)
            self.entry155.delete(0, END)
            self.entry155.insert(0, temp_noise_array[46])
            
            self.entry156 = Entry(Frame2, width=6)
            self.entry156.place(in_=Frame2, x=270, y=100)
            self.entry156.delete(0, END)
            self.entry156.insert(0, temp_noise_array[47])
            
            self.entry157 = Entry(Frame2, width=6)
            self.entry157.place(in_=Frame2, x=320, y=100)
            self.entry157.delete(0, END)
            self.entry157.insert(0, temp_noise_array[48])
            
            self.entry158 = Entry(Frame2, width=6)
            self.entry158.place(in_=Frame2, x=370, y=100)
            self.entry158.delete(0, END)
            self.entry158.insert(0, temp_noise_array[49])
            
            self.entry159 = Entry(Frame2, width=6)
            self.entry159.place(in_=Frame2, x=420, y=100)
            self.entry159.delete(0, END)
            self.entry159.insert(0, temp_noise_array[50])
            
            self.entry160 = Entry(Frame2, width=6)
            self.entry160.place(in_=Frame2, x=470, y=100)
            self.entry160.delete(0, END)
            self.entry160.insert(0, temp_noise_array[51])
            
            output161 = ttk.Label(Frame2, text="dBV^2/Hz", font="Arial 10 bold")
            output161.place(in_=Frame2,x=520,y=100)
            
            output162 = ttk.Label(Frame2, text="PSRR", font="Arial 10 bold")
            output162.place(in_=Frame2,x=10,y=130)
            
            self.entry162 = Entry(Frame2, width=6)
            self.entry162.place(in_=Frame2, x=170, y=130)
            self.entry162.delete(0, END)
            self.entry162.insert(0, temp_noise_array[52])
            
            self.entry163 = Entry(Frame2, width=6)
            self.entry163.place(in_=Frame2, x=220, y=130)
            self.entry163.delete(0, END)
            self.entry163.insert(0, temp_noise_array[53])
            
            self.entry164 = Entry(Frame2, width=6)
            self.entry164.place(in_=Frame2, x=270, y=130)
            self.entry164.delete(0, END)
            self.entry164.insert(0, temp_noise_array[54])
            
            self.entry165 = Entry(Frame2, width=6)
            self.entry165.place(in_=Frame2, x=320, y=130)
            self.entry165.delete(0, END)
            self.entry165.insert(0, temp_noise_array[55])
            
            self.entry166 = Entry(Frame2, width=6)
            self.entry166.place(in_=Frame2, x=370, y=130)
            self.entry166.delete(0, END)
            self.entry166.insert(0, temp_noise_array[56])
            
            self.entry167 = Entry(Frame2, width=6)
            self.entry167.place(in_=Frame2, x=420, y=130)
            self.entry167.delete(0, END)
            self.entry167.insert(0, temp_noise_array[57])
            
            self.entry168 = Entry(Frame2, width=6)
            self.entry168.place(in_=Frame2, x=470, y=130)
            self.entry168.delete(0, END)
            self.entry168.insert(0, temp_noise_array[58])
            
            output169 = ttk.Label(Frame2, text="dB", font="Arial 10 bold")
            output169.place(in_=Frame2,x=520,y=130)
            
            output170 = ttk.Label(Frame2, text="Gain/Cycle", font="Arial 10 bold")
            output170.place(in_=Frame2,x=50,y=170)
            
            output171 = ttk.Label(Frame2, text="Input Referred Phase Detector Phase Noise", font="Arial 10 bold")
            output171.place(in_=Frame2,x=200,y=170)
            
            output172 = ttk.Label(Frame2, text="Min:", font="Arial 10 bold")
            output172.place(in_=Frame2,x=10,y=190)
            
            self.entry169 = Entry(Frame2, width=6)
            self.entry169.place(in_=Frame2, x=70, y=190)
            self.entry169.delete(0, END)
            self.entry169.insert(0, temp_noise_array[59])
            
            self.entry170 = Entry(Frame2, width=6)
            self.entry170.place(in_=Frame2, x=170, y=190)
            self.entry170.delete(0, END)
            self.entry170.insert(0, temp_noise_array[60])
            
            self.entry171 = Entry(Frame2, width=6)
            self.entry171.place(in_=Frame2, x=220, y=190)
            self.entry171.delete(0, END)
            self.entry171.insert(0, temp_noise_array[61])
            
            self.entry172 = Entry(Frame2, width=6)
            self.entry172.place(in_=Frame2, x=270, y=190)
            self.entry172.delete(0, END)
            self.entry172.insert(0, temp_noise_array[62])
            
            self.entry173 = Entry(Frame2, width=6)
            self.entry173.place(in_=Frame2, x=320, y=190)
            self.entry173.delete(0, END)
            self.entry173.insert(0, temp_noise_array[63])
            
            self.entry174 = Entry(Frame2, width=6)
            self.entry174.place(in_=Frame2, x=370, y=190)
            self.entry174.delete(0, END)
            self.entry174.insert(0, temp_noise_array[64])
            
            self.entry175 = Entry(Frame2, width=6)
            self.entry175.place(in_=Frame2, x=420, y=190)
            self.entry175.delete(0, END)
            self.entry175.insert(0, temp_noise_array[65])            
            
            self.entry176 = Entry(Frame2, width=6)
            self.entry176.place(in_=Frame2, x=470, y=190)
            self.entry176.delete(0, END)
            self.entry176.insert(0, temp_noise_array[66])
            
            output177 = ttk.Label(Frame2, text="dBc/Hz", font="Arial 10 bold")
            output177.place(in_=Frame2,x=520,y=190)
            
            output178 = ttk.Label(Frame2, text="Mid:", font="Arial 10 bold")
            output178.place(in_=Frame2,x=10,y=220)
            
            self.entry178 = Entry(Frame2, width=6)
            self.entry178.place(in_=Frame2, x=70, y=220)
            self.entry178.delete(0, END)
            self.entry178.insert(0, temp_noise_array[67])
            
            self.entry179 = Entry(Frame2, width=6)
            self.entry179.place(in_=Frame2, x=170, y=220)
            self.entry179.delete(0, END)
            self.entry179.insert(0, temp_noise_array[68])
            
            self.entry180 = Entry(Frame2, width=6)
            self.entry180.place(in_=Frame2, x=220, y=220)
            self.entry180.delete(0, END)
            self.entry180.insert(0, temp_noise_array[69])
            
            self.entry181 = Entry(Frame2, width=6)
            self.entry181.place(in_=Frame2, x=270, y=220)
            self.entry181.delete(0, END)
            self.entry181.insert(0, temp_noise_array[70])
            
            self.entry182 = Entry(Frame2, width=6)
            self.entry182.place(in_=Frame2, x=320, y=220)
            self.entry182.delete(0, END)
            self.entry182.insert(0, temp_noise_array[71])
            
            self.entry183 = Entry(Frame2, width=6)
            self.entry183.place(in_=Frame2, x=370, y=220)
            self.entry183.delete(0, END)
            self.entry183.insert(0, temp_noise_array[72])
            
            self.entry184 = Entry(Frame2, width=6)
            self.entry184.place(in_=Frame2, x=420, y=220)
            self.entry184.delete(0, END)
            self.entry184.insert(0, temp_noise_array[73])
            
            self.entry185 = Entry(Frame2, width=6)
            self.entry185.place(in_=Frame2, x=470, y=220)
            self.entry185.delete(0, END)
            self.entry185.insert(0, temp_noise_array[74])
            
            output185 = ttk.Label(Frame2, text="dBc/Hz", font="Arial 10 bold")
            output185.place(in_=Frame2,x=520,y=220)
            
            output186 = ttk.Label(Frame2, text="Max:", font="Arial 10 bold")
            output186.place(in_=Frame2,x=10,y=250)
            
            self.entry187 = Entry(Frame2, width=6)
            self.entry187.place(in_=Frame2, x=70, y=250)
            self.entry187.delete(0, END)
            self.entry187.insert(0, temp_noise_array[75])
            
            self.entry188 = Entry(Frame2, width=6)
            self.entry188.place(in_=Frame2, x=170, y=250)
            self.entry188.delete(0, END)
            self.entry188.insert(0, temp_noise_array[76])
            
            self.entry189 = Entry(Frame2, width=6)
            self.entry189.place(in_=Frame2, x=220, y=250)
            self.entry189.delete(0, END)
            self.entry189.insert(0, temp_noise_array[77])
            
            self.entry190 = Entry(Frame2, width=6)
            self.entry190.place(in_=Frame2, x=270, y=250)
            self.entry190.delete(0, END)
            self.entry190.insert(0, temp_noise_array[78])
            
            self.entry191 = Entry(Frame2, width=6)
            self.entry191.place(in_=Frame2, x=320, y=250)
            self.entry191.delete(0, END)
            self.entry191.insert(0, temp_noise_array[79])
            
            self.entry192 = Entry(Frame2, width=6)
            self.entry192.place(in_=Frame2, x=370, y=250)
            self.entry192.delete(0, END)
            self.entry192.insert(0, temp_noise_array[80])
            
            self.entry193 = Entry(Frame2, width=6)
            self.entry193.place(in_=Frame2, x=420, y=250)
            self.entry193.delete(0, END)
            self.entry193.insert(0, temp_noise_array[81])
            
            self.entry194 = Entry(Frame2, width=6)
            self.entry194.place(in_=Frame2, x=470, y=250)
            self.entry194.delete(0, END)
            self.entry194.insert(0, temp_noise_array[82])
            
            output194 = ttk.Label(Frame2, text="dBc/Hz", font="Arial 10 bold")
            output194.place(in_=Frame2,x=520,y=250)
            
            output195 = ttk.Label(Frame2, text="Phase Detector Noise Offset For Frac-N Mode", font="Arial 10 bold")
            output195.place(in_=Frame2,x=10,y=280)
            
            self.entry195 = Entry(Frame2, width=6)
            self.entry195.place(in_=Frame2, x=470, y=280)
            self.entry195.delete(0, END)
            self.entry195.insert(0, temp_noise_array[83])
            
            output196 = ttk.Label(Frame2, text="dB", font="Arial 10 bold")
            output196.place(in_=Frame2,x=520,y=280)
            
            output197 = ttk.Label(Frame2, text="Add Subtract From Phase Detector Noise", font="Arial 10 bold")
            output197.place(in_=Frame2,x=10,y=310)
            
            self.entry196 = Entry(Frame2, width=6)
            self.entry196.place(in_=Frame2, x=470, y=310)
            self.entry196.delete(0, END)
            self.entry196.insert(0, temp_noise_array[84])
            
            output198 = ttk.Label(Frame2, text="dB", font="Arial 10 bold")
            output198.place(in_=Frame2,x=520,y=310)
            
        def change_noise4():
            
            global noise
            global change_noise
            global temp_noise_array
            change_noise() 
            noise = 4
            
            Crystal_button.config(relief=RAISED)
            Reference_button.config(relief=RAISED)
            Phase_button.config(relief=RAISED)
            VCONoise_button.config(relief=SUNKEN)
            RFDivider_button.config(relief=RAISED)
            Operational_button.config(relief=RAISED)
            Delta_button.config(relief=RAISED)
            Composite_button.config(relief=RAISED)
            HighPass_button.config(relief=RAISED)
            
            Frame2 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=600, height=450, bd=0)
            Frame2.grid(row = 2, column =5, rowspan = 2, columnspan = 2, sticky = W+E+N+S)
            
            output199 = ttk.Label(Frame2, text="Use Simple VCO Model?", font="Arial 10 bold")
            output199.place(in_=Frame2,x=10,y=10)   
            
            check_var = IntVar()
            Checkbutton(root, variable=check_var).place(in_=Frame2, x=490, y=10)
            
            output200 = ttk.Label(Frame2, text="VCO Noise Specification Frequency", font="Arial 10 bold")
            output200.place(in_=Frame2,x=10,y=40)
            
            self.entry197 = Entry(Frame2, width=6)
            self.entry197.place(in_=Frame2, x=470, y=40)
            self.entry197.delete(0, END)
            self.entry197.insert(0, temp_noise_array[85])
            
            output201 = ttk.Label(Frame2, text="Hz", font="Arial 10 bold")
            output201.place(in_=Frame2,x=520,y=40)
            
            output202 = ttk.Label(Frame2, text="Tuning Voltage", font="Arial 10 bold")
            output202.place(in_=Frame2,x=10,y=70)
            
            self.entry199 = Entry(Frame2, width=6)
            self.entry199.place(in_=Frame2, x=170, y=70)
            self.entry199.delete(0, END)
            self.entry199.insert(0, temp_noise_array[86])
            
            self.entry200 = Entry(Frame2, width=6)
            self.entry200.place(in_=Frame2, x=220, y=70)
            self.entry200.delete(0, END)
            self.entry200.insert(0, temp_noise_array[87])
        
            self.entry201 = Entry(Frame2, width=6)
            self.entry201.place(in_=Frame2, x=270, y=70)
            self.entry201.delete(0, END)
            self.entry201.insert(0, temp_noise_array[88])
            
            self.entry202 = Entry(Frame2, width=6)
            self.entry202.place(in_=Frame2, x=320, y=70)
            self.entry202.delete(0, END)
            self.entry202.insert(0, temp_noise_array[89])
            
            self.entry203 = Entry(Frame2, width=6)
            self.entry203.place(in_=Frame2, x=370, y=70)
            self.entry203.delete(0, END)
            self.entry203.insert(0, temp_noise_array[90])
            
            self.entry204 = Entry(Frame2, width=6)
            self.entry204.place(in_=Frame2, x=420, y=70)
            self.entry204.delete(0, END)
            self.entry204.insert(0, temp_noise_array[91])
            
            self.entry205 = Entry(Frame2, width=6)
            self.entry205.place(in_=Frame2, x=470, y=70)
            self.entry205.delete(0, END)
            self.entry205.insert(0, temp_noise_array[92])
            
            output205 = ttk.Label(Frame2, text="Volts", font="Arial 10 bold")
            output205.place(in_=Frame2,x=520,y=70)
            
            output206 = ttk.Label(Frame2, text="VCO Frequency", font="Arial 10 bold")
            output206.place(in_=Frame2,x=10,y=100)
            
            self.entry207 = Entry(Frame2, width=6)
            self.entry207.place(in_=Frame2, x=170, y=100)
            self.entry207.delete(0, END)
            self.entry207.insert(0, temp_noise_array[93])
            
            self.entry208 = Entry(Frame2, width=6)
            self.entry208.place(in_=Frame2, x=220, y=100)
            self.entry208.delete(0, END)
            self.entry208.insert(0, temp_noise_array[94])
            
            self.entry209 = Entry(Frame2, width=6)
            self.entry209.place(in_=Frame2, x=270, y=100)
            self.entry209.delete(0, END)
            self.entry209.insert(0, temp_noise_array[95])
            
            self.entry210 = Entry(Frame2, width=6)
            self.entry210.place(in_=Frame2, x=320, y=100)
            self.entry210.delete(0, END)
            self.entry210.insert(0, temp_noise_array[96])
            
            self.entry211 = Entry(Frame2, width=6)
            self.entry211.place(in_=Frame2, x=370, y=100)
            self.entry211.delete(0, END)
            self.entry211.insert(0, temp_noise_array[97])            
            
            self.entry212 = Entry(Frame2, width=6)
            self.entry212.place(in_=Frame2, x=420, y=100)
            self.entry212.delete(0, END)
            self.entry212.insert(0, temp_noise_array[98])
            
            self.entry213 = Entry(Frame2, width=6)
            self.entry213.place(in_=Frame2, x=470, y=100)
            self.entry213.delete(0, END)
            self.entry213.insert(0, temp_noise_array[99])
            
            output213 = ttk.Label(Frame2, text="Hz", font="Arial 10 bold")
            output213.place(in_=Frame2,x=520,y=100)
            
            output214 = ttk.Label(Frame2, text="VCO Gain (Kvco)", font="Arial 10 bold")
            output214.place(in_=Frame2,x=10,y=130)
            
            self.entry215 = Entry(Frame2, width=6)
            self.entry215.place(in_=Frame2, x=170, y=130)
            self.entry215.delete(0, END)
            self.entry215.insert(0, temp_noise_array[100])
            
            self.entry216 = Entry(Frame2, width=6)
            self.entry216.place(in_=Frame2, x=220, y=130)
            self.entry216.delete(0, END)
            self.entry216.insert(0, temp_noise_array[101])
            
            self.entry217 = Entry(Frame2, width=6)
            self.entry217.place(in_=Frame2, x=270, y=130)
            self.entry217.delete(0, END)
            self.entry217.insert(0, temp_noise_array[102])
            
            self.entry218 = Entry(Frame2, width=6)
            self.entry218.place(in_=Frame2, x=320, y=130)
            self.entry218.delete(0, END)
            self.entry218.insert(0, temp_noise_array[103])
            
            self.entry219 = Entry(Frame2, width=6)
            self.entry219.place(in_=Frame2, x=370, y=130)
            self.entry219.delete(0, END)
            self.entry219.insert(0, temp_noise_array[104])
            
            self.entry220 = Entry(Frame2, width=6)
            self.entry220.place(in_=Frame2, x=420, y=130)
            self.entry220.delete(0, END)
            self.entry220.insert(0, temp_noise_array[105])
            
            self.entry221 = Entry(Frame2, width=6)
            self.entry221.place(in_=Frame2, x=470, y=130)
            self.entry221.delete(0, END)
            self.entry221.insert(0, temp_noise_array[106])
            
            output221 = ttk.Label(Frame2, text="MHz", font="Arial 10 bold")
            output221.place(in_=Frame2,x=520,y=130)
            
            output222 = ttk.Label(Frame2, text="VCO Supply Noise", font="Arial 10 bold")
            output222.place(in_=Frame2,x=10,y=160)
            
            self.entry223 = Entry(Frame2, width=6)
            self.entry223.place(in_=Frame2, x=170, y=160)
            self.entry223.delete(0, END)
            self.entry223.insert(0, temp_noise_array[107])
            
            self.entry224 = Entry(Frame2, width=6)
            self.entry224.place(in_=Frame2, x=220, y=160)
            self.entry224.delete(0, END)
            self.entry224.insert(0, temp_noise_array[108])
            
            self.entry225 = Entry(Frame2, width=6)
            self.entry225.place(in_=Frame2, x=270, y=160)
            self.entry225.delete(0, END)
            self.entry225.insert(0, temp_noise_array[109])
            
            self.entry226 = Entry(Frame2, width=6)
            self.entry226.place(in_=Frame2, x=320, y=160)
            self.entry226.delete(0, END)
            self.entry226.insert(0, temp_noise_array[110])
            
            self.entry227 = Entry(Frame2, width=6)
            self.entry227.place(in_=Frame2, x=370, y=160)
            self.entry227.delete(0, END)
            self.entry227.insert(0, temp_noise_array[111])
            
            self.entry228 = Entry(Frame2, width=6)
            self.entry228.place(in_=Frame2, x=420, y=160)
            self.entry228.delete(0, END)
            self.entry228.insert(0, temp_noise_array[112])
            
            self.entry229 = Entry(Frame2, width=6)
            self.entry229.place(in_=Frame2, x=470, y=160)
            self.entry229.delete(0, END)
            self.entry229.insert(0, temp_noise_array[113])
            
            output229 = ttk.Label(Frame2, text="dBV^2/Hz", font="Arial 10 bold")
            output229.place(in_=Frame2,x=520,y=160)
            
            output230 = ttk.Label(Frame2, text="Frequency", font="Arial 10 bold")
            output230.place(in_=Frame2,x=50,y=200)
            
            output231 = ttk.Label(Frame2, text="Open Loop VCO Phase Noise", font="Arial 10 bold")
            output231.place(in_=Frame2,x=200,y=200)
            
            output232 = ttk.Label(Frame2, text="Min:", font="Arial 10 bold")
            output232.place(in_=Frame2,x=10,y=220)
            
            self.entry230 = Entry(Frame2, width=6)
            self.entry230.place(in_=Frame2, x=70, y=220)
            self.entry230.delete(0, END)
            self.entry230.insert(0, temp_noise_array[114])
            
            self.entry231 = Entry(Frame2, width=6)
            self.entry231.place(in_=Frame2, x=170, y=220)
            self.entry231.delete(0, END)
            self.entry231.insert(0, temp_noise_array[115])
            
            self.entry232 = Entry(Frame2, width=6)
            self.entry232.place(in_=Frame2, x=220, y=220)
            self.entry232.delete(0, END)
            self.entry232.insert(0, temp_noise_array[116])
            
            self.entry233 = Entry(Frame2, width=6)
            self.entry233.place(in_=Frame2, x=270, y=220)
            self.entry233.delete(0, END)
            self.entry233.insert(0, temp_noise_array[117])
            
            self.entry234 = Entry(Frame2, width=6)
            self.entry234.place(in_=Frame2, x=320, y=220)
            self.entry234.delete(0, END)
            self.entry234.insert(0, temp_noise_array[118])
            
            self.entry235 = Entry(Frame2, width=6)
            self.entry235.place(in_=Frame2, x=370, y=220)
            self.entry235.delete(0, END)
            self.entry235.insert(0, temp_noise_array[119])
            
            self.entry236 = Entry(Frame2, width=6)
            self.entry236.place(in_=Frame2, x=420, y=220)
            self.entry236.delete(0, END)
            self.entry236.insert(0, temp_noise_array[120])
            
            self.entry237 = Entry(Frame2, width=6)
            self.entry237.place(in_=Frame2, x=470, y=220)
            self.entry237.delete(0, END)
            self.entry237.insert(0, temp_noise_array[121])
            
            output237 = ttk.Label(Frame2, text="dBc/Hz", font="Arial 10 bold")
            output237.place(in_=Frame2,x=520,y=220)
            
            output238 = ttk.Label(Frame2, text="Mid:", font="Arial 10 bold")
            output238.place(in_=Frame2,x=10,y=250)
            
            self.entry238 = Entry(Frame2, width=6)
            self.entry238.place(in_=Frame2, x=70, y=250)
            self.entry238.delete(0, END)
            self.entry238.insert(0, temp_noise_array[122])            
            
            self.entry239 = Entry(Frame2, width=6)
            self.entry239.place(in_=Frame2, x=170, y=250)
            self.entry239.delete(0, END)
            self.entry239.insert(0, temp_noise_array[123])
            
            self.entry240 = Entry(Frame2, width=6)
            self.entry240.place(in_=Frame2, x=220, y=250)
            self.entry240.delete(0, END)
            self.entry240.insert(0, temp_noise_array[124])
            
            self.entry241 = Entry(Frame2, width=6)
            self.entry241.place(in_=Frame2, x=270, y=250)
            self.entry241.delete(0, END)
            self.entry241.insert(0, temp_noise_array[125])
            
            self.entry242 = Entry(Frame2, width=6)
            self.entry242.place(in_=Frame2, x=320, y=250)
            self.entry242.delete(0, END)
            self.entry242.insert(0, temp_noise_array[126])
            
            self.entry243 = Entry(Frame2, width=6)
            self.entry243.place(in_=Frame2, x=370, y=250)
            self.entry243.delete(0, END)
            self.entry243.insert(0, temp_noise_array[127])
            
            self.entry244 = Entry(Frame2, width=6)
            self.entry244.place(in_=Frame2, x=420, y=250)
            self.entry244.delete(0, END)
            self.entry244.insert(0, temp_noise_array[128])
            
            self.entry245 = Entry(Frame2, width=6)
            self.entry245.place(in_=Frame2, x=470, y=250)
            self.entry245.delete(0, END)
            self.entry245.insert(0, temp_noise_array[129])
            
            output245 = ttk.Label(Frame2, text="dBc/Hz", font="Arial 10 bold")
            output245.place(in_=Frame2,x=520,y=250)
            
            output246 = ttk.Label(Frame2, text="Max:", font="Arial 10 bold")
            output246.place(in_=Frame2,x=10,y=280)
            
            self.entry246 = Entry(Frame2, width=6)
            self.entry246.place(in_=Frame2, x=70, y=280)
            self.entry246.delete(0, END)
            self.entry246.insert(0, temp_noise_array[130])
            
            self.entry247 = Entry(Frame2, width=6)
            self.entry247.place(in_=Frame2, x=170, y=280)
            self.entry247.delete(0, END)
            self.entry247.insert(0, temp_noise_array[131])
            
            self.entry248 = Entry(Frame2, width=6)
            self.entry248.place(in_=Frame2, x=220, y=280)
            self.entry248.delete(0, END)
            self.entry248.insert(0, temp_noise_array[132])
            
            self.entry249 = Entry(Frame2, width=6)
            self.entry249.place(in_=Frame2, x=270, y=280)
            self.entry249.delete(0, END)
            self.entry249.insert(0, temp_noise_array[133])
            
            self.entry250 = Entry(Frame2, width=6)
            self.entry250.place(in_=Frame2, x=320, y=280)
            self.entry250.delete(0, END)
            self.entry250.insert(0, temp_noise_array[134])
            
            self.entry251 = Entry(Frame2, width=6)
            self.entry251.place(in_=Frame2, x=370, y=280)
            self.entry251.delete(0, END)
            self.entry251.insert(0, temp_noise_array[135])
            
            self.entry252 = Entry(Frame2, width=6)
            self.entry252.place(in_=Frame2, x=420, y=280)
            self.entry252.delete(0, END)
            self.entry252.insert(0, temp_noise_array[136])
            
            self.entry253 = Entry(Frame2, width=6)
            self.entry253.place(in_=Frame2, x=470, y=280)
            self.entry253.delete(0, END)
            self.entry253.insert(0, temp_noise_array[137])
            
            output253 = ttk.Label(Frame2, text="dBc/Hz", font="Arial 10 bold")
            output253.place(in_=Frame2,x=520,y=280)
            
            output254 = ttk.Label(Frame2, text="Offset [dB]", font="Arial 10 bold")
            output254.place(in_=Frame2,x=10,y=310)
            
            self.entry254 = Entry(Frame2, width=6)
            self.entry254.place(in_=Frame2, x=470, y=310)
            self.entry254.delete(0, END)
            self.entry254.insert(0, temp_noise_array[138])
            
            output255 = ttk.Label(Frame2, text="dB", font="Arial 10 bold")
            output255.place(in_=Frame2,x=520,y=310)
            
            output256 = ttk.Label(Frame2, text="Pushing Figure", font="Arial 10 bold")
            output256.place(in_=Frame2,x=10,y=340)
            
            self.entry255 = Entry(Frame2, width=6)
            self.entry255.place(in_=Frame2, x=470, y=340)
            self.entry255.delete(0, END)
            self.entry255.insert(0, temp_noise_array[139])
            
            output257 = ttk.Label(Frame2, text="Hz/Volts", font="Arial 10 bold")
            output257.place(in_=Frame2,x=520,y=340)
            
        def change_noise5():
            
            global noise
            global change_noise
            global temp_noise_array
            change_noise() 
            noise = 5
            
            Crystal_button.config(relief=RAISED)
            Reference_button.config(relief=RAISED)
            Phase_button.config(relief=RAISED)
            VCONoise_button.config(relief=RAISED)
            RFDivider_button.config(relief=SUNKEN)
            Operational_button.config(relief=RAISED)
            Delta_button.config(relief=RAISED)
            Composite_button.config(relief=RAISED)
            HighPass_button.config(relief=RAISED)
            
            Frame2 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=600, height=450, bd=0)
            Frame2.grid(row = 2, column =5, rowspan = 2, columnspan = 2, sticky = W+E+N+S)
            
            output258 = ttk.Label(Frame2, text="Divider Noise Specification Frequency", font="Arial 10 bold")
            output258.place(in_=Frame2,x=10,y=10)
            
            self.entry256 = Entry(Frame2, width=6)
            self.entry256.place(in_=Frame2, x=470, y=10)
            self.entry256.delete(0, END)
            self.entry256.insert(0, temp_noise_array[140])
            
            output259 = ttk.Label(Frame2, text="Hz", font="Arial 10 bold")
            output259.place(in_=Frame2,x=520,y=10)
            
            output260 = ttk.Label(Frame2, text="Frequency Offset", font="Arial 10 bold")
            output260.place(in_=Frame2,x=10,y=40)
            
            self.entry257 = Entry(Frame2, width=6)
            self.entry257.place(in_=Frame2, x=170, y=40)
            self.entry257.delete(0, END)
            self.entry257.insert(0, temp_noise_array[141])
            
            self.entry258 = Entry(Frame2, width=6)
            self.entry258.place(in_=Frame2, x=220, y=40)
            self.entry258.delete(0, END)
            self.entry258.insert(0, temp_noise_array[142])
            
            self.entry259 = Entry(Frame2, width=6)
            self.entry259.place(in_=Frame2, x=270, y=40)
            self.entry259.delete(0, END)
            self.entry259.insert(0, temp_noise_array[143])
            
            self.entry260 = Entry(Frame2, width=6)
            self.entry260.place(in_=Frame2, x=320, y=40)
            self.entry260.delete(0, END)
            self.entry260.insert(0, temp_noise_array[144])
            
            self.entry261 = Entry(Frame2, width=6)
            self.entry261.place(in_=Frame2, x=370, y=40)
            self.entry261.delete(0, END)
            self.entry261.insert(0, temp_noise_array[145])
            
            self.entry262 = Entry(Frame2, width=6)
            self.entry262.place(in_=Frame2, x=420, y=40)
            self.entry262.delete(0, END)
            self.entry262.insert(0, temp_noise_array[146])
            
            self.entry263 = Entry(Frame2, width=6)
            self.entry263.place(in_=Frame2, x=470, y=40)
            self.entry263.delete(0, END)
            self.entry263.insert(0, temp_noise_array[147])
            
            output263 = ttk.Label(Frame2, text="Hz", font="Arial 10 bold")
            output263.place(in_=Frame2,x=520,y=40)
            
            output264 = ttk.Label(Frame2, text="Feedback Divider Noise", font="Arial 10 bold")
            output264.place(in_=Frame2,x=10,y=70)
            
            self.entry264 = Entry(Frame2, width=6)
            self.entry264.place(in_=Frame2, x=170, y=70)
            self.entry264.delete(0, END)
            self.entry264.insert(0, temp_noise_array[148])
            
            self.entry265 = Entry(Frame2, width=6)
            self.entry265.place(in_=Frame2, x=220, y=70)
            self.entry265.delete(0, END)
            self.entry265.insert(0, temp_noise_array[149])
            
            self.entry266 = Entry(Frame2, width=6)
            self.entry266.place(in_=Frame2, x=270, y=70)
            self.entry266.delete(0, END)
            self.entry266.insert(0, temp_noise_array[150])
            
            self.entry267 = Entry(Frame2, width=6)
            self.entry267.place(in_=Frame2, x=320, y=70)
            self.entry267.delete(0, END)
            self.entry267.insert(0, temp_noise_array[151])
            
            self.entry268 = Entry(Frame2, width=6)
            self.entry268.place(in_=Frame2, x=370, y=70)
            self.entry268.delete(0, END)
            self.entry268.insert(0, temp_noise_array[152])
            
            self.entry269 = Entry(Frame2, width=6)
            self.entry269.place(in_=Frame2, x=420, y=70)
            self.entry269.delete(0, END)
            self.entry269.insert(0, temp_noise_array[153])
            
            self.entry270 = Entry(Frame2, width=6)
            self.entry270.place(in_=Frame2, x=470, y=70)
            self.entry270.delete(0, END)
            self.entry270.insert(0, temp_noise_array[154])
            
            output270 = ttk.Label(Frame2, text="dBc/Hz", font="Arial 10 bold")
            output270.place(in_=Frame2,x=520,y=70)
            
            output271 = ttk.Label(Frame2, text="Offset [dB]", font="Arial 10 bold")
            output271.place(in_=Frame2,x=10,y=100)
            
            self.entry271 = Entry(Frame2, width=6)
            self.entry271.place(in_=Frame2, x=470, y=100)
            self.entry271.delete(0, END)
            self.entry271.insert(0, temp_noise_array[155])
            
            output272 = ttk.Label(Frame2, text="dB", font="Arial 10 bold")
            output272.place(in_=Frame2,x=520,y=100)
            
        def change_noise6():
            
            global noise
            global change_noise
            global temp_noise_array
            change_noise() 
            noise = 6
            
            Crystal_button.config(relief=RAISED)
            Reference_button.config(relief=RAISED)
            Phase_button.config(relief=RAISED)
            VCONoise_button.config(relief=RAISED)
            RFDivider_button.config(relief=RAISED)
            Operational_button.config(relief=SUNKEN)
            Delta_button.config(relief=RAISED)
            Composite_button.config(relief=RAISED)
            HighPass_button.config(relief=RAISED)
            
            Frame2 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=600, height=450, bd=0)
            Frame2.grid(row = 2, column =5, rowspan = 2, columnspan = 2, sticky = W+E+N+S)
            
            output273 = ttk.Label(Frame2, text="Frequency Offset", font="Arial 10 bold")
            output273.place(in_=Frame2,x=10,y=10)
            
            self.entry272 = Entry(Frame2, width=6)
            self.entry272.place(in_=Frame2, x=170, y=10)
            self.entry272.delete(0, END)
            self.entry272.insert(0, temp_noise_array[156])
            
            self.entry273 = Entry(Frame2, width=6)
            self.entry273.place(in_=Frame2, x=220, y=10)
            self.entry273.delete(0, END)
            self.entry273.insert(0, temp_noise_array[157])
            
            self.entry274 = Entry(Frame2, width=6)
            self.entry274.place(in_=Frame2, x=270, y=10)
            self.entry274.delete(0, END)
            self.entry274.insert(0, temp_noise_array[158])
            
            self.entry275 = Entry(Frame2, width=6)
            self.entry275.place(in_=Frame2, x=320, y=10)
            self.entry275.delete(0, END)
            self.entry275.insert(0, temp_noise_array[159])            

            self.entry276 = Entry(Frame2, width=6)
            self.entry276.place(in_=Frame2, x=370, y=10)
            self.entry276.delete(0, END)
            self.entry276.insert(0, temp_noise_array[160])
            
            self.entry277 = Entry(Frame2, width=6)
            self.entry277.place(in_=Frame2, x=420, y=10)
            self.entry277.delete(0, END)
            self.entry277.insert(0, temp_noise_array[161])
            
            self.entry278 = Entry(Frame2, width=6)
            self.entry278.place(in_=Frame2, x=470, y=10)
            self.entry278.delete(0, END)
            self.entry278.insert(0, temp_noise_array[162])            

            output278 = ttk.Label(Frame2, text="Hz", font="Arial 10 bold")
            output278.place(in_=Frame2,x=520,y=10)
            
            output279 = ttk.Label(Frame2, text="OpAmp Supply Noise", font="Arial 10 bold")
            output279.place(in_=Frame2,x=10,y=40)
            
            self.entry279 = Entry(Frame2, width=6)
            self.entry279.place(in_=Frame2, x=170, y=40)
            self.entry279.delete(0, END)
            self.entry279.insert(0, temp_noise_array[163])
            
            self.entry280 = Entry(Frame2, width=6)
            self.entry280.place(in_=Frame2, x=220, y=40)
            self.entry280.delete(0, END)
            self.entry280.insert(0, temp_noise_array[164])
            
            self.entry281 = Entry(Frame2, width=6)
            self.entry281.place(in_=Frame2, x=270, y=40)
            self.entry281.delete(0, END)
            self.entry281.insert(0, temp_noise_array[165])
            
            self.entry282 = Entry(Frame2, width=6)
            self.entry282.place(in_=Frame2, x=320, y=40)
            self.entry282.delete(0, END)
            self.entry282.insert(0, temp_noise_array[166])
            
            self.entry283 = Entry(Frame2, width=6)
            self.entry283.place(in_=Frame2, x=370, y=40)
            self.entry283.delete(0, END)
            self.entry283.insert(0, temp_noise_array[167])
            
            self.entry284 = Entry(Frame2, width=6)
            self.entry284.place(in_=Frame2, x=420, y=40)
            self.entry284.delete(0, END)
            self.entry284.insert(0, temp_noise_array[168])
            
            self.entry285 = Entry(Frame2, width=6)
            self.entry285.place(in_=Frame2, x=470, y=40)
            self.entry285.delete(0, END)
            self.entry285.insert(0, temp_noise_array[169])
            
            output285 = ttk.Label(Frame2, text="dBcV^2/Hz", font="Arial 10 bold")
            output285.place(in_=Frame2,x=520,y=40)

            output286 = ttk.Label(Frame2, text="PSRR", font="Arial 10 bold")
            output286.place(in_=Frame2,x=10,y=70)
            
            self.entry286 = Entry(Frame2, width=6)
            self.entry286.place(in_=Frame2, x=170, y=70)
            self.entry286.delete(0, END)
            self.entry286.insert(0, temp_noise_array[170])
            
            self.entry287 = Entry(Frame2, width=6)
            self.entry287.place(in_=Frame2, x=220, y=70)
            self.entry287.delete(0, END)
            self.entry287.insert(0, temp_noise_array[171])
            
            self.entry288 = Entry(Frame2, width=6)
            self.entry288.place(in_=Frame2, x=270, y=70)
            self.entry288.delete(0, END)
            self.entry288.insert(0, temp_noise_array[172])
            
            self.entry289 = Entry(Frame2, width=6)
            self.entry289.place(in_=Frame2, x=320, y=70)
            self.entry289.delete(0, END)
            self.entry289.insert(0, temp_noise_array[173])
            
            self.entry290 = Entry(Frame2, width=6)
            self.entry290.place(in_=Frame2, x=370, y=70)
            self.entry290.delete(0, END)
            self.entry290.insert(0, temp_noise_array[174])
            
            self.entry291 = Entry(Frame2, width=6)
            self.entry291.place(in_=Frame2, x=420, y=70)
            self.entry291.delete(0, END)
            self.entry291.insert(0, temp_noise_array[175])
            
            self.entry292 = Entry(Frame2, width=6)
            self.entry292.place(in_=Frame2, x=470, y=70)
            self.entry292.delete(0, END)
            self.entry292.insert(0, temp_noise_array[176])
            
            output292 = ttk.Label(Frame2, text="dB", font="Arial 10 bold")
            output292.place(in_=Frame2,x=520,y=70)
            
            output293 = ttk.Label(Frame2, text="Vn", font="Arial 10 bold")
            output293.place(in_=Frame2,x=10,y=100)
            
            self.entry293 = Entry(Frame2, width=6)
            self.entry293.place(in_=Frame2, x=170, y=100)
            self.entry293.delete(0, END)
            self.entry293.insert(0, temp_noise_array[177])
            
            self.entry294 = Entry(Frame2, width=6)
            self.entry294.place(in_=Frame2, x=220, y=100)
            self.entry294.delete(0, END)
            self.entry294.insert(0, temp_noise_array[178])
            
            self.entry295 = Entry(Frame2, width=6)
            self.entry295.place(in_=Frame2, x=270, y=100)
            self.entry295.delete(0, END)
            self.entry295.insert(0, temp_noise_array[179])
            
            self.entry296 = Entry(Frame2, width=6)
            self.entry296.place(in_=Frame2, x=320, y=100)
            self.entry296.delete(0, END)
            self.entry296.insert(0, temp_noise_array[180])
            
            self.entry297 = Entry(Frame2, width=6)
            self.entry297.place(in_=Frame2, x=370, y=100)
            self.entry297.delete(0, END)
            self.entry297.insert(0, temp_noise_array[181])
            
            self.entry298 = Entry(Frame2, width=6)
            self.entry298.place(in_=Frame2, x=420, y=100)
            self.entry298.delete(0, END)
            self.entry298.insert(0, temp_noise_array[182])
            
            self.entry299 = Entry(Frame2, width=6)
            self.entry299.place(in_=Frame2, x=470, y=100)
            self.entry299.delete(0, END)
            self.entry299.insert(0, temp_noise_array[183])
            
            output299 = ttk.Label(Frame2, text="dB V^2/Hz", font="Arial 10 bold")
            output299.place(in_=Frame2,x=520,y=100)

            output300 = ttk.Label(Frame2, text="Inp", font="Arial 10 bold")
            output300.place(in_=Frame2,x=10,y=130)
            
            self.entry300 = Entry(Frame2, width=6)
            self.entry300.place(in_=Frame2, x=170, y=130)
            self.entry300.delete(0, END)
            self.entry300.insert(0, temp_noise_array[184])
            
            self.entry301 = Entry(Frame2, width=6)
            self.entry301.place(in_=Frame2, x=220, y=130)
            self.entry301.delete(0, END)
            self.entry301.insert(0, temp_noise_array[185])
            
            self.entry302 = Entry(Frame2, width=6)
            self.entry302.place(in_=Frame2, x=270, y=130)
            self.entry302.delete(0, END)
            self.entry302.insert(0, temp_noise_array[186])
            
            self.entry303 = Entry(Frame2, width=6)
            self.entry303.place(in_=Frame2, x=320, y=130)
            self.entry303.delete(0, END)
            self.entry303.insert(0, temp_noise_array[187])
            
            self.entry304 = Entry(Frame2, width=6)
            self.entry304.place(in_=Frame2, x=370, y=130)
            self.entry304.delete(0, END)
            self.entry304.insert(0, temp_noise_array[188])
            
            self.entry305 = Entry(Frame2, width=6)
            self.entry305.place(in_=Frame2, x=420, y=130)
            self.entry305.delete(0, END)
            self.entry305.insert(0, temp_noise_array[189])
            
            self.entry306 = Entry(Frame2, width=6)
            self.entry306.place(in_=Frame2, x=470, y=130)
            self.entry306.delete(0, END)
            self.entry306.insert(0, temp_noise_array[190])
            
            output306 = ttk.Label(Frame2, text="dB V^2/Hz", font="Arial 10 bold")
            output306.place(in_=Frame2,x=520,y=130)
            
            output307 = ttk.Label(Frame2, text="Inn", font="Arial 10 bold")
            output307.place(in_=Frame2,x=10,y=160)
            
            self.entry307 = Entry(Frame2, width=6)
            self.entry307.place(in_=Frame2, x=170, y=160)
            self.entry307.delete(0, END)
            self.entry307.insert(0, temp_noise_array[191])
            
            self.entry308 = Entry(Frame2, width=6)
            self.entry308.place(in_=Frame2, x=220, y=160)
            self.entry308.delete(0, END)
            self.entry308.insert(0, temp_noise_array[192])
            
            self.entry309 = Entry(Frame2, width=6)
            self.entry309.place(in_=Frame2, x=270, y=160)
            self.entry309.delete(0, END)
            self.entry309.insert(0, temp_noise_array[193])
            
            self.entry310 = Entry(Frame2, width=6)
            self.entry310.place(in_=Frame2, x=320, y=160)
            self.entry310.delete(0, END)
            self.entry310.insert(0, temp_noise_array[194])
            
            self.entry311 = Entry(Frame2, width=6)
            self.entry311.place(in_=Frame2, x=370, y=160)
            self.entry311.delete(0, END)
            self.entry311.insert(0, temp_noise_array[195])
            
            self.entry312 = Entry(Frame2, width=6)
            self.entry312.place(in_=Frame2, x=420, y=160)
            self.entry312.delete(0, END)
            self.entry312.insert(0, temp_noise_array[196])
            
            self.entry313 = Entry(Frame2, width=6)
            self.entry313.place(in_=Frame2, x=470, y=160)
            self.entry313.delete(0, END)
            self.entry313.insert(0, temp_noise_array[197])
            
            output313 = ttk.Label(Frame2, text="dB V^2/Hz", font="Arial 10 bold")
            output313.place(in_=Frame2,x=520,y=160)            
            
        def change_noise7():
            
            global noise
            global change_noise
            global temp_noise_array
            change_noise() 
            noise = 7
            
            Crystal_button.config(relief=RAISED)
            Reference_button.config(relief=RAISED)
            Phase_button.config(relief=RAISED)
            VCONoise_button.config(relief=RAISED)
            RFDivider_button.config(relief=RAISED)
            Operational_button.config(relief=RAISED)
            Delta_button.config(relief=SUNKEN)
            Composite_button.config(relief=RAISED)
            HighPass_button.config(relief=RAISED)
            
            Frame2 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=600, height=450, bd=0)
            Frame2.grid(row = 2, column =5, rowspan = 2, columnspan = 2, sticky = W+E+N+S)
            
            output314 = ttk.Label(Frame2, text="Delta Sigma Type", font="Arial 10 bold")
            output314.place(in_=Frame2,x=10,y=10)
            
            paramMenu=['nth Order Mode B','nth Order Mode B','nth Order Mode B']
            option_select=StringVar(root)
            option_select.set("nth Order Mode B")
            drop5=OptionMenu(root,option_select,*paramMenu)
            drop5.place(in_=Frame2,x=400,y=10)   
            drop5.config(font=('Arial 7 bold'),bg='white',width=14)
            drop5['menu'].config(font=('Arial 7 bold'),bg='white')
            
            output315 = ttk.Label(Frame2, text="Delta Sigma Order", font="Arial 10 bold")
            output315.place(in_=Frame2,x=10,y=40)
            
            paramMenu=['1','2','3']
            option_select=StringVar(root)
            option_select.set("1")
            drop5=OptionMenu(root,option_select,*paramMenu)
            drop5.place(in_=Frame2,x=430,y=40)   
            drop5.config(font=('Arial 7 bold'),bg='white',width=8)
            drop5['menu'].config(font=('Arial 7 bold'),bg='white')
            
            output316 = ttk.Label(Frame2, text="Offset [dB]", font="Arial 10 bold")
            output316.place(in_=Frame2,x=10,y=70)
            
            self.entry314 = Entry(Frame2, width=6)
            self.entry314.place(in_=Frame2, x=470, y=70)
            self.entry314.delete(0, END)
            self.entry314.insert(0, temp_noise_array[198])
            
        def change_noise8():
            
            global noise
            global change_noise
            global temp_noise_array
            change_noise() 
            noise = 8
            
            Crystal_button.config(relief=RAISED)
            Reference_button.config(relief=RAISED)
            Phase_button.config(relief=RAISED)
            VCONoise_button.config(relief=RAISED)
            RFDivider_button.config(relief=RAISED)
            Operational_button.config(relief=RAISED)
            Delta_button.config(relief=RAISED)
            Composite_button.config(relief=SUNKEN)
            HighPass_button.config(relief=RAISED)
            
            Frame2 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=600, height=450, bd=0)
            Frame2.grid(row = 2, column =5, rowspan = 2, columnspan = 2, sticky = W+E+N+S)
            
            Frame5 = Frame(Frame2, highlightthickness=1, width=8, height=8, bd=0)
            Frame5.grid(row = 1, column =1, rowspan = 1, columnspan = 1, sticky = W+E+N+S)
            
            Frame4 = Frame(Frame2, highlightthickness=1, width=580, height=150, bd=0)
            Frame4.grid(row = 1, column =2, rowspan = 2, columnspan = 2, sticky = W+E+N+S)
            
            Frame3 = Frame(Frame2, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=580, height=290, bd=0)
            Frame3.grid(row = 5, column =2, rowspan = 2, columnspan = 2, sticky = W+E+N+S)
            
            output317 = ttk.Label(Frame2, text="Frequency Offset", font="Arial 10 bold")
            output317.place(in_=Frame2,x=10,y=10)
            
            self.entry315 = Entry(Frame2, width=6)
            self.entry315.place(in_=Frame2, x=170, y=10)
            self.entry315.delete(0, END)
            self.entry315.insert(0, temp_noise_array[199])
            
            self.entry316 = Entry(Frame2, width=6)
            self.entry316.place(in_=Frame2, x=220, y=10)
            self.entry316.delete(0, END)
            self.entry316.insert(0, temp_noise_array[200])
            
            self.entry317 = Entry(Frame2, width=6)
            self.entry317.place(in_=Frame2, x=270, y=10)
            self.entry317.delete(0, END)
            self.entry317.insert(0, temp_noise_array[201])
            
            self.entry318 = Entry(Frame2, width=6)
            self.entry318.place(in_=Frame2, x=320, y=10)
            self.entry318.delete(0, END)
            self.entry318.insert(0, temp_noise_array[202])
            
            self.entry319 = Entry(Frame2, width=6)
            self.entry319.place(in_=Frame2, x=370, y=10)
            self.entry319.delete(0, END)
            self.entry319.insert(0, temp_noise_array[203])
            
            self.entry320 = Entry(Frame2, width=6)
            self.entry320.place(in_=Frame2, x=420, y=10)
            self.entry320.delete(0, END)
            self.entry320.insert(0, temp_noise_array[204])
            
            self.entry321 = Entry(Frame2, width=6)
            self.entry321.place(in_=Frame2, x=470, y=10)
            self.entry321.delete(0, END)
            self.entry321.insert(0, temp_noise_array[205])
            
            output321 = ttk.Label(Frame2, text="Hz", font="Arial 10 bold")
            output321.place(in_=Frame2,x=520,y=10)
            
            output322 = ttk.Label(Frame2, text="Phase Noise Mask", font="Arial 10 bold")
            output322.place(in_=Frame2,x=10,y=40)
            
            self.entry322 = Entry(Frame2, width=6)
            self.entry322.place(in_=Frame2, x=170, y=40)
            self.entry322.delete(0, END)
            self.entry322.insert(0, temp_noise_array[206])
            
            self.entry323 = Entry(Frame2, width=6)
            self.entry323.place(in_=Frame2, x=220, y=40)
            self.entry323.delete(0, END)
            self.entry323.insert(0, temp_noise_array[207])

            self.entry324 = Entry(Frame2, width=6)
            self.entry324.place(in_=Frame2, x=270, y=40)
            self.entry324.delete(0, END)
            self.entry324.insert(0, temp_noise_array[208])
            
            self.entry325 = Entry(Frame2, width=6)
            self.entry325.place(in_=Frame2, x=320, y=40)
            self.entry325.delete(0, END)
            self.entry325.insert(0, temp_noise_array[209])
            
            self.entry326 = Entry(Frame2, width=6)
            self.entry326.place(in_=Frame2, x=370, y=40)
            self.entry326.delete(0, END)
            self.entry326.insert(0, temp_noise_array[210])
            
            self.entry327 = Entry(Frame2, width=6)
            self.entry327.place(in_=Frame2, x=420, y=40)
            self.entry327.delete(0, END)
            self.entry327.insert(0, temp_noise_array[211])
            
            self.entry328 = Entry(Frame2, width=6)
            self.entry328.place(in_=Frame2, x=470, y=40)
            self.entry328.delete(0, END)
            self.entry328.insert(0, temp_noise_array[212])
            
            output328 = ttk.Label(Frame2, text="dBc/Hz", font="Arial 10 bold")
            output328.place(in_=Frame2,x=520,y=40)
            
            output329 = ttk.Label(Frame2, text="Add Subtract From Composite Noise?", font="Arial 10 bold")
            output329.place(in_=Frame2,x=10,y=70)
            
            self.entry329 = Entry(Frame2, width=6)
            self.entry329.place(in_=Frame2, x=470, y=70)
            self.entry329.delete(0, END)
            self.entry329.insert(0, temp_noise_array[213])
            
            output330 = ttk.Label(Frame2, text="dB", font="Arial 10 bold")
            output330.place(in_=Frame2,x=520,y=70)
            
            output331 = ttk.Label(Frame2, text="Refine Number of Points?", font="Arial 10 bold")
            output331.place(in_=Frame2,x=10,y=100)
            
            check_var = IntVar()
            Checkbutton(root, variable=check_var).place(in_=Frame2, x=490, y=100)
            
            output332 = ttk.Label(Frame3, text="Enable", font="Arial 10 bold")
            output332.place(in_=Frame3,x=30,y=10)
            
            check_var = IntVar()
            Checkbutton(root, variable=check_var).place(in_=Frame3, x=5, y=10)
            
            option_filter=StringVar(root)
            option_filter.set("Frequency Divider")    
            myoptions=['We Too Low','Some ting Wong','Ding Bang Ow']
            drop_menu = OptionMenu(root, option_filter, *myoptions)
            drop_menu.place(in_=Frame3, x=400, y=10)
            drop_menu.config(font=('Arial 7 bold'),bg='white',width=16)
            drop_menu['menu'].config(font=('Arial 7 bold'),bg='white')
            
            output333 = ttk.Label(Frame3, text="Division Ratio", font="Arial 10 bold")
            output333.place(in_=Frame3,x=10,y=40)
            
            self.entry330 = Entry(Frame3, width=6)
            self.entry330.place(in_=Frame3, x=480, y=40)
            self.entry330.delete(0, END)
            self.entry330.insert(0, temp_noise_array[214])           

            output331 = ttk.Label(Frame3, text="Phase Noise Floor FOM", font="Arial 10 bold")
            output331.place(in_=Frame3,x=10,y=70)
            
            self.entry331 = Entry(Frame3, width=6)
            self.entry331.place(in_=Frame3, x=180, y=70)
            self.entry331.delete(0, END)
            self.entry331.insert(0, temp_noise_array[215])
            
            output331 = ttk.Label(Frame3, text="dB/Hz", font="Arial 10 bold")
            output331.place(in_=Frame3,x=230,y=70)
            
            output332 = ttk.Label(Frame3, text="Spec Frequency", font="Arial 10 bold")
            output332.place(in_=Frame3,x=370,y=70)
            
            self.entry332 = Entry(Frame3, width=6)
            self.entry332.place(in_=Frame3, x=480, y=70)
            self.entry332.delete(0, END)
            self.entry332.insert(0, temp_noise_array[216])
            
            output333 = ttk.Label(Frame3, text="Flicker Noise FOM", font="Arial 10 bold")
            output333.place(in_=Frame3,x=10,y=100)
            
            self.entry333 = Entry(Frame3, width=6)
            self.entry333.place(in_=Frame3, x=480, y=100)
            self.entry333.delete(0, END)
            self.entry333.insert(0, temp_noise_array[217])
            
            output333 = ttk.Label(Frame3, text="dBc/Hz", font="Arial 10 bold")
            output333.place(in_=Frame3,x=525,y=100)
            
            output334 = ttk.Label(Frame3, text="Divider Output Power", font="Arial 10 bold")
            output334.place(in_=Frame3,x=10,y=190)
            
            self.entry334 = Entry(Frame3, width=6)
            self.entry334.place(in_=Frame3, x=480, y=190)
            self.entry334.delete(0, END)
            self.entry334.insert(0, temp_noise_array[218])
            
            output334 = ttk.Label(Frame3, text="dBm", font="Arial 10 bold")
            output334.place(in_=Frame3,x=525,y=190)
            
            output335 = ttk.Label(Frame3, text="Output Frequency", font="Arial 10 bold")
            output335.place(in_=Frame3,x=10,y=220)
            
            self.entry335 = Entry(Frame3, width=6)
            self.entry335.place(in_=Frame3, x=480, y=220)
            self.entry335.delete(0, END)
            self.entry335.insert(0, temp_noise_array[219])
            
        def change_noise9():
            
            global noise
            global change_noise
            global temp_noise_array
            change_noise() 
            noise = 9
            
            Crystal_button.config(relief=RAISED)
            Reference_button.config(relief=RAISED)
            Phase_button.config(relief=RAISED)
            VCONoise_button.config(relief=RAISED)
            RFDivider_button.config(relief=RAISED)
            Operational_button.config(relief=RAISED)
            Delta_button.config(relief=RAISED)
            Composite_button.config(relief=RAISED)
            HighPass_button.config(relief=SUNKEN)
            
            Frame2 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=600, height=450, bd=0)
            Frame2.grid(row = 2, column =5, rowspan = 2, columnspan = 2, sticky = W+E+N+S)
            
            output336 = ttk.Label(Frame2, text="High Pass Integration Cutoff Frequency", font="Arial 10 bold")
            output336.place(in_=Frame2,x=10,y=10)
            
            self.entry336 = Entry(Frame2, width=6)
            self.entry336.place(in_=Frame2, x=470, y=10)
            self.entry336.delete(0, END)
            self.entry336.insert(0, temp_noise_array[220])
            
            output336 = ttk.Label(Frame2, text="Hz", font="Arial 10 bold")
            output336.place(in_=Frame2,x=520,y=10)
            
            output337 = ttk.Label(Frame2, text="High Pass Filter Order", font="Arial 10 bold")
            output337.place(in_=Frame2,x=10,y=40)
            
            paramMenu=['1','2','3']
            option_select=StringVar(root)
            option_select.set("1")
            drop5=OptionMenu(root,option_select,*paramMenu)
            drop5.place(in_=Frame2,x=430,y=40)   
            drop5.config(font=('Arial 7 bold'),bg='white',width=8)
            drop5['menu'].config(font=('Arial 7 bold'),bg='white')
        
        output337 = ttk.Label(Frame1, text="Fractional N", font="Arial 10 bold")
        output337.place(in_=Frame1,x=10,y=10)
        check_var = IntVar()
        Checkbutton(root, variable=check_var).place(in_=Frame1, x=250, y=10)
        
        output337 = ttk.Label(Frame1, text="Enable Op-Amp Noise?", font="Arial 10 bold")
        output337.place(in_=Frame1,x=10,y=40)
        check_var = IntVar()
        Checkbutton(root, variable=check_var).place(in_=Frame1, x=250, y=40)
        
        Crystal_button = Button(Frame1, text="Crystal Oscillator / Input Noise", bg="white",font="Arial 10 bold", width=25, command=change_noise1)
        Crystal_button.place(in_=Frame1, x=40, y=70)
        Crystal_button.config(relief=SUNKEN)
        
        Reference_button = Button(Frame1, text="Reference Path Noise", bg="white",font="Arial 10 bold", width=25, command=change_noise2)   # command=self.new_window1
        Reference_button.place(in_=Frame1, x=40, y=110)
        
        Phase_button = Button(Frame1, text="Phase Detector Noise", bg="white",font="Arial 10 bold", width=25, command=change_noise3)
        Phase_button.place(in_=Frame1, x=40, y=150)
        
        VCONoise_button = Button(Frame1, text="VCO Noise", bg="white",font="Arial 10 bold", width=25, command=change_noise4)
        VCONoise_button.place(in_=Frame1, x=40, y=190)
        
        RFDivider_button = Button(Frame1, text="RF Divider Noise", bg="white",font="Arial 10 bold", width=25, command=change_noise5)
        RFDivider_button.place(in_=Frame1, x=40, y=230)
        
        Operational_button = Button(Frame1, text="Operational Amplifier Noise", bg="white",font="Arial 10 bold", width=25, command=change_noise6)
        Operational_button.place(in_=Frame1, x=40, y=270)
        
        Delta_button = Button(Frame1, text="Delta Sigma Noise", bg="white",font="Arial 10 bold", width=25, command=change_noise7)
        Delta_button.place(in_=Frame1, x=40, y=310)
        
        Composite_button = Button(Frame1, text="Composite Noise / Output Path", bg="white",font="Arial 10 bold", width=25, command=change_noise8)
        Composite_button.place(in_=Frame1, x=40, y=350)
        
        HighPass_button = Button(Frame1, text="High Pass Noise Integration", bg="white",font="Arial 10 bold", width=25, command=change_noise9)
        HighPass_button.place(in_=Frame1, x=40, y=390)
        
        output102 = ttk.Label(Frame2, text="Frequency Offset", font="Arial 10 bold")
        output102.place(in_=Frame2,x=10,y=10)
        
        self.entry102 = Entry(Frame2, width=6)
        self.entry102.place(in_=Frame2, x=170, y=10)
        self.entry102.insert(0, temp_noise_array[0])
        
        self.entry103 = Entry(Frame2, width=6)
        self.entry103.place(in_=Frame2, x=220, y=10)
        self.entry103.insert(0, temp_noise_array[1])
        
        self.entry104 = Entry(Frame2, width=6)
        self.entry104.place(in_=Frame2, x=270, y=10)
        self.entry104.insert(0, temp_noise_array[2])
        
        self.entry105 = Entry(Frame2, width=6)
        self.entry105.place(in_=Frame2, x=320, y=10)
        self.entry105.insert(0, temp_noise_array[3])
        
        self.entry106 = Entry(Frame2, width=6)
        self.entry106.place(in_=Frame2, x=370, y=10)
        self.entry106.insert(0, temp_noise_array[4])
        
        self.entry107 = Entry(Frame2, width=6)
        self.entry107.place(in_=Frame2, x=420, y=10)
        self.entry107.insert(0, temp_noise_array[5])
        
        self.entry108 = Entry(Frame2, width=6)
        self.entry108.place(in_=Frame2, x=470, y=10)
        self.entry108.insert(0, temp_noise_array[6])
        
        output108 = ttk.Label(Frame2, text="Hz", font="Arial 10 bold")
        output108.place(in_=Frame2,x=520,y=10)
        
        output109 = ttk.Label(Frame2, text="Crystal Oscillator Noise", font="Arial 10 bold")
        output109.place(in_=Frame2,x=10,y=40)
        
        self.entry110 = Entry(Frame2, width=6)
        self.entry110.place(in_=Frame2, x=170, y=40)
        self.entry110.insert(0, temp_noise_array[7])
        
        self.entry111 = Entry(Frame2, width=6)
        self.entry111.place(in_=Frame2, x=220, y=40)
        self.entry111.insert(0, temp_noise_array[8])
        
        self.entry112 = Entry(Frame2, width=6)
        self.entry112.place(in_=Frame2, x=270, y=40)
        self.entry112.insert(0, temp_noise_array[9])
        
        self.entry113 = Entry(Frame2, width=6)
        self.entry113.place(in_=Frame2, x=320, y=40)
        self.entry113.insert(0, temp_noise_array[10])
        
        self.entry114 = Entry(Frame2, width=6)
        self.entry114.place(in_=Frame2, x=370, y=40)
        self.entry114.insert(0, temp_noise_array[11])
        
        self.entry115 = Entry(Frame2, width=6)
        self.entry115.place(in_=Frame2, x=420, y=40)
        self.entry115.insert(0, temp_noise_array[12])
        
        self.entry116 = Entry(Frame2, width=6)
        self.entry116.place(in_=Frame2, x=470, y=40)
        self.entry116.insert(0, temp_noise_array[13])
        
        output116 = ttk.Label(Frame2, text="dBc/Hz", font="Arial 10 bold")
        output116.place(in_=Frame2,x=520,y=40)
        
        output117 = ttk.Label(Frame2, text="Add / Subtract from Crystal Phase Noise?", font="Arial 10 bold")
        output117.place(in_=Frame2,x=10,y=70)
        
        self.entry118 = Entry(Frame2, width=6)
        self.entry118.place(in_=Frame2, x=470, y=70)
        self.entry118.insert(0, temp_noise_array[14])
        
        output118 = ttk.Label(Frame2, text="dB", font="Arial 10 bold")
        output118.place(in_=Frame2,x=520,y=70)
        
        
  #  def OptionsMenu_SelectionEvent(event):
  #      label50 = ttk.Label(root, text="3rd and 4th Pole Calculations", font="Arial 12 bold")
  #      label50.grid(row=10, column=1,columnspan=1, sticky=W)
        
    def filter_design(self):
        root = Toplevel(self.master)
        root.geometry("750x600")
        
        def apply_filter():
            
            global filtertype
            global filterselect
            global input412
            #global input413
            global input414
            global input415
            global input416
            #global input417
            #global input418
            #global input419
            #global input420
            #global input421
            #global input422
            #global input423
            #global input424
            #global input425
            #global input426
            #global input427
            #global input428
            #global input429
            #global input430
            #global input431
            #global input432
            #global input433
            #global input434
            #global input435
            #global input436
            #global input437
            #global input438
            #global input439
            
            input412 = entry412.get()
            #input413 = entry413.get()
            input414 = entry414.get()
            input415 = entry415.get()
            input416 = entry416.get()
            self.input417 = entry417.get()
            self.input418 = entry418.get()
            self.input419 = entry419.get()
            self.input420 = entry420.get()
            self.input421 = entry421.get()
            self.input422 = entry422.get()
            self.input423 = entry423.get()
            self.input424 = entry424.get()
            self.input425 = entry425.get()
            self.input426 = entry426.get()
            self.input427 = entry427.get()
            self.input428 = entry428.get()
            #input429 = entry429.get()
            self.input430 = entry430.get()
            self.input431 = entry431.get()
            self.input432 = entry432.get()
            #input433 = entry433.get()
            #input434 = entry434.get()
            self.input435 = entry435.get()
            self.input436 = entry436.get()
            self.input437 = entry437.get()
            self.input438 = entry438.get()
            self.input439 = entry439.get()
            
            filterbox()     #prepares the filter box for data being sent back
            
            if filtertype == 1:  #C1, C2, R2
                
                self.entry25.config(state='normal')
                self.input425 = entry425.get()              #C1
                self.entry25.delete(0, END)
                self.entry25.insert(0, self.input425)
                self.entry25.config(state='disabled')
                
                self.entry26.config(state='normal')
                self.input426 = entry426.get()              #C2
                self.entry26.delete(0, END)
                self.entry26.insert(0, self.input426)
                self.entry26.config(state='disabled')
                
                self.entry31.config(state='normal')
                self.input431 = entry431.get()              #R2
                self.entry31.delete(0, END)
                self.entry31.insert(0, self.input431)
                self.entry31.config(state='disabled')
                
            elif filtertype == 2: #C1, R1, L1, C2 Butterworth

                self.entry25.config(state='normal')
                self.input425 = entry425.get()              #C1
                self.entry25.delete(0, END)
                self.entry25.insert(0, self.input425)
                self.entry25.config(state='disabled')
                
                self.entry26.config(state='normal')
                self.input426 = entry426.get()              #C2
                self.entry26.delete(0, END)
                self.entry26.insert(0, self.input426)
                self.entry26.config(state='disabled')
                
                self.entry30.config(state='normal')
                self.input430 = entry430.get()              #R1
                self.entry30.delete(0, END)
                self.entry30.insert(0, self.input430)
                self.entry30.config(state='disabled')
                
                self.entry28.config(state='normal')
                self.input428 = entry428.get()              #L1
                self.entry28.delete(0, END)
                self.entry28.insert(0, self.input428)
                self.entry28.config(state='disabled') 
                
            else: #filtertype == 3:  #C1, C2, R2, C3, R3

                self.entry25.config(state='normal')
                self.input425 = entry425.get()              #C1
                self.entry25.delete(0, END)
                self.entry25.insert(0, self.input425)
                self.entry25.config(state='disabled')
                
                self.entry26.config(state='normal')
                self.input426 = entry426.get()              #C2
                self.entry26.delete(0, END)
                self.entry26.insert(0, self.input426)
                self.entry26.config(state='disabled')
                
                self.entry31.config(state='normal')
                self.input431 = entry431.get()              #R2
                self.entry31.delete(0, END)
                self.entry31.insert(0, self.input431)
                self.entry31.config(state='disabled')
                
                self.entry27.config(state='normal')
                self.input427 = entry427.get()              #C3
                self.entry27.delete(0, END)
                self.entry27.insert(0, self.input427)
                self.entry27.config(state='disabled')
                
                self.entry32.config(state='normal')
                self.input432 = entry432.get()              #R3
                self.entry32.delete(0, END)
                self.entry32.insert(0, self.input432)
                self.entry32.config(state='disabled')
                        
            #else:


                
            #self.entry25.config(state='normal')
            #input425 = entry425.get()              #C1
            #self.entry25.delete(0, END)
            #self.entry25.insert(0, input425)
            #self.entry25.config(state='disabled')
            
            #self.entry26.config(state='normal')
            #input426 = entry426.get()              #C2
            #self.entry26.delete(0, END)
            #self.entry26.insert(0, input426)
            #self.entry26.config(state='disabled')
            
            #self.entry27.config(state='normal')
            #input427 = entry427.get()              #C3
            #self.entry27.delete(0, END)
            #self.entry27.insert(0, input427)
            #self.entry27.config(state='disabled')            
            
            #self.entry28.config(state='normal')
            #input428 = entry428.get()              #L1
            #self.entry28.delete(0, END)
            #self.entry28.insert(0, input428)
            #self.entry28.config(state='disabled') 
            
            #inputx = entry99.get()              #I1
            #self.entry29.delete(0, END)
            #self.entry29.insert(0, inputx)
            
            #self.entry30.config(state='normal')
            #input430 = entry430.get()              #R1
            #self.entry30.delete(0, END)
            #self.entry30.insert(0, input430)
            #self.entry30.config(state='disabled')
            
            #self.entry31.config(state='normal')
            #input431 = entry431.get()              #R2
            #self.entry31.delete(0, END)
            #self.entry31.insert(0, input431)
            #self.entry31.config(state='disabled')
            
            #self.entry32.config(state='normal')
            #input432 = entry432.get()              #R3
            #self.entry32.delete(0, END)
            #self.entry32.insert(0, input432)
            #self.entry32.config(state='disabled')
            
            #inputx = entry99.get()              #R4
            #self.entry33.delete(0, END)
            #self.entry33.insert(0, inputx)
            
            #inputx = entry99.get()              #Rl
            #self.entry34.delete(0, END)
            #self.entry34.insert(0, inputx)
            
        def save_filter():
            #global apply_filter           
            apply_filter()
            root.destroy()
        
        Frame1 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=400, height=100, bd= 0)
        Frame1.grid(row = 2, column =2, rowspan = 8, columnspan = 12, sticky = W+E+N+S)

        Frame2 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=400, height=80, bd=0)
        Frame2.grid(row = 10, column =2, rowspan = 6, columnspan = 12, sticky = W+E+N+S)        
        
        Frame3 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=350, height=500, bd=0)
        Frame3.grid(row = 2, column =20, rowspan = 23, columnspan = 11, sticky = W+E+N+S)
        
        Frame4 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=200, height=80, bd=0)
        Frame4.grid(row = 16, column =2, rowspan = 6, columnspan = 12, sticky = W+E+N+S)
        
        Frame5 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=150, height=80, bd=0)
        Frame5.grid(row = 16, column =10, rowspan = 6, columnspan = 10, sticky = W+E+N+S)
        
        Frame6 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=400, height=80, bd=0)
        Frame6.grid(row = 22, column =2, rowspan = 4, columnspan = 10, sticky = W+E+N+S)
        
        Filter_OK_button = Button(root, text="OK", bg="white",font="Arial 10 bold", width=10, command=save_filter)
        Filter_OK_button.place(x=200, y=550)
        
        Filter_Apply_button = tk.Button(root, text="Apply", bg="white",font="Arial 10 bold", width=10, command=apply_filter)
        Filter_Apply_button.place(x=320, y=550)
        
        Filter_Cancel_button = Button(root, text="Cancel", bg="white",font="Arial 10 bold", width=10, command=root.destroy)
        Filter_Cancel_button.place(x=440, y=550)
        
        def change_input(self):
            global filterselect
            global filtertype
            global chosen_option
            chosen_option = option_filtertype.get()
            
            if chosen_option == 'Passive':
                pic_option = pic1
                pic.config(image=pic_option)
                
                filterselect = "Passive"
                filtertype = 1
                
                entry418.config(state='disabled')        #C3/Cvco
                       
                entry419.config(state='disabled')        #Rg
              
                entry420.config(state='disabled')        #Rf
                
                entry421.config(state='disabled')        #Cb
                
                entry422.config(state='disabled')        #Rb1
                
                entry423.config(state='disabled')        #Rb2

                entry424.config(state='disabled')        #RL
                
                entry425.config(state='normal')         #C1
                
                entry430.config(state='disabled')       #R1
                
                entry428.config(state='disabled')       #L1
                
                entry426.config(state='normal')         #C2
                
                entry431.config(state='normal')         #R2
                
                entry427.config(state='disabled')       #C3
                
                entry432.config(state='disabled')       #R3
                
                entry435.config(state='disabled')        #L3
                
                entry436.config(state='disabled')        #C4
                
                entry437.config(state='disabled')        #L5
                
                entry438.config(state='disabled')        #C6
               
                entry439.config(state='disabled')        #L7
                
            elif chosen_option =='Butterworth':
                pic_option = pic2
                pic.config(image=pic_option)
                
                filtertype = 2
                filterselect = "Butterworth"

                entry431.config(state='disabled')       #R2
                
                entry427.config(state='disabled')       #C3
                
                entry432.config(state='disabled')       #R3
                
                entry421.config(state='normal')          #Cb
             
                entry422.config(state='normal')          #Rb1
                
                entry423.config(state='normal')          #Rb2
               
                entry424.config(state='normal')          #RL
                
                entry425.config(state='normal')             #C1
                
                entry430.config(state='normal')             #R1
                
                entry428.config(state='normal')             #L1
                
                entry426.config(state='normal')             #C2
                
                entry431.config(state='disabled')           #R2
                
                entry427.config(state='disabled')           #C3
                
                entry432.config(state='disabled')           #R3
                
                entry435.config(state='disabled')            #L3
                
                entry436.config(state='disabled')            #C4
                
                entry437.config(state='disabled')            #L5 
                
                entry438.config(state='disabled')            #C6
               
                entry439.config(state='disabled')            #L7
                
            else:
                pic_option = pic3
                pic.config(image=pic_option)
                filtertype = 3
                filterselect = "activeC"

                entry418.config(state='normal')          #C3/Cvco
                       
                entry419.config(state='disabled')        #Rg
              
                entry420.config(state='disabled')        #Rf
                
                entry421.config(state='normal')          #Cb
                
                entry422.config(state='normal')          #Rb1
                
                entry423.config(state='normal')          #Rb2

                entry424.config(state='disabled')            #RL
                
                entry425.config(state='normal')             #C1
                
                entry430.config(state='disabled')           #R1
                
                entry428.config(state='disabled')           #L1
                
                entry426.config(state='normal')             #C2
                
                entry431.config(state='normal')             #R2
                
                entry427.config(state='normal')             #C3
                
                entry432.config(state='normal')             #R3
                
                entry435.config(state='disabled')            #L3
                
                entry436.config(state='disabled')            #C4
                
                entry437.config(state='disabled')            #L5 
                
                entry438.config(state='disabled')            #C6
               
                entry439.config(state='disabled')            #L7
        
        pic1 = PhotoImage(file='C:/Users/Eric/Desktop/Senior D/RC.gif')
        pic2 = PhotoImage(file='C:/Users/Eric/Desktop/Senior D/Butter.gif')
        pic3 = PhotoImage(file='C:/Users/Eric/Desktop/Senior D/ActiveC.gif')
        pic = ttk.Label(root, image=pic1)
        pic.image = pic1 
        pic.place(in_=Frame3, x=10, y=0)
        
        output1 = ttk.Label(Frame1, text="Loop Filter Type", font="Arial 10 bold")
        output1.place(in_=Frame1,x=150,y=0)
        
        output1 = ttk.Label(Frame1, text="Select Filter Type", font="Arial 10 bold")
        output1.place(in_=Frame1,x=10,y=30)
        
        option_filtertype=StringVar(root)
        option_filtertype.set(filterselect)
        #option_filter.set("Passive")
        myoptions=['Passive','Butterworth','activeC']
        drop_menu = OptionMenu(root, option_filtertype, *myoptions, command=change_input)
        drop_menu.place(in_=Frame1, x=250, y=30)
        drop_menu.config(font=('Arial 7 bold'),bg='white',width=14)
        drop_menu['menu'].config(font=('Arial 7 bold'),bg='white')
        
        output1 = ttk.Label(Frame1, text="Filter Order", font="Arial 10 bold")
        output1.place(in_=Frame1,x=10,y=60)
        
        paramMenu=['2','3','4']
        option_select=StringVar(root)
        option_select.set("Select")
        drop4=OptionMenu(root,option_select,*paramMenu)
        drop4.place(in_=Frame1,x=250,y=60)   
        drop4.config(font=('Arial 7 bold'),bg='white',width=8)
        drop4['menu'].config(font=('Arial 7 bold'),bg='white')
        
        output1 = ttk.Label(Frame1, text="Calculation Method", font="Arial 10 bold")
        output1.place(in_=Frame1,x=10,y=90)
        
        paramMenu=['Exact Calculation','Exact Calculation','Exact Calculation']
        option_select=StringVar(root)
        option_select.set("Select")
        drop5=OptionMenu(root,option_select,*paramMenu)
        drop5.place(in_=root,x=250,y=90)   
        drop5.config(font=('Arial 7 bold'),bg='white',width=14)
        drop5['menu'].config(font=('Arial 7 bold'),bg='white')
        
        output1 = ttk.Label(Frame1, text="Damping Factor For Approximate Method", font="Arial 10 bold")
        output1.place(in_=Frame1,x=10,y=120)
        entry412 = Entry(Frame1, width=8)
        entry412.place(in_=Frame1, x=300, y=120)
        
        output1 = ttk.Label(Frame2, text="Third and Fourth Pole Calculation", font="Arial 10 bold")
        output1.place(in_=Frame2,x=100,y=0)
        
        output1 = ttk.Label(Frame2, text="3rd Pole", font="Arial 10 bold")
        output1.place(in_=Frame2,x=10,y=30)        
        entry414 = Entry(Frame2, width=5)
        entry414.place(in_=Frame2, x=350, y=30)
        
        output1 = ttk.Label(Frame2, text="4rd Pole", font="Arial 10 bold")
        output1.place(in_=Frame2,x=10,y=60)        
        entry415 = Entry(Frame2, width=5)
        entry415.place(in_=Frame2, x=350, y=60)
        
        output1 = ttk.Label(Frame2, text="Optimization Parameter", font="Arial 10 bold")
        output1.place(in_=Frame2,x=10,y=90)        
        entry416 = Entry(Frame2, width=5)
        entry416.place(in_=Frame2, x=350, y=90)
        
        output1 = ttk.Label(Frame3, text="VCO Input", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=240)        
        entry417 = Entry(Frame3, width=5)
        entry417.place(in_=Frame3, x=80, y=240)

        output1 = ttk.Label(Frame3, text="C3/Cvco", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=260)        
        entry418 = Entry(Frame3, width=5)
        entry418.place(in_=Frame3, x=80, y=260)
        #entry418.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="Rg", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=280)        
        entry419 = Entry(Frame3, width=5)
        entry419.place(in_=Frame3, x=80, y=280)
        #entry419.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="Rf", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=300)        
        entry420 = Entry(Frame3, width=5)
        entry420.place(in_=Frame3, x=80, y=300)
        #entry420.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="Cb", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=320)        
        entry421 = Entry(Frame3, width=5)
        entry421.place(in_=Frame3, x=80, y=320)
        #entry421.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="Rb1", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=340)        
        entry422 = Entry(Frame3, width=5)
        entry422.place(in_=Frame3, x=80, y=340)
        #entry422.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="Rb2", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=360)        
        entry423 = Entry(Frame3, width=5)
        entry423.place(in_=Frame3, x=80, y=360)
        #entry423.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="RL", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=380)        
        entry424 = Entry(Frame3, width=5)
        entry424.place(in_=Frame3, x=80, y=380)
        #entry424.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="C1", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=240)        
        entry425 = Entry(Frame3, width=5)
        entry425.place(in_=Frame3, x=180, y=240)
        
        output1 = ttk.Label(Frame3, text="R1", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=260)        
        entry430 = Entry(Frame3, width=5)
        entry430.place(in_=Frame3, x=180, y=260)
        #entry430.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="L1", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=280)        
        entry428 = Entry(Frame3, width=5)
        entry428.place(in_=Frame3, x=180, y=280)
        #entry428.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="C2", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=300)        
        entry426 = Entry(Frame3, width=5)
        entry426.place(in_=Frame3, x=180, y=300)
        
        output1 = ttk.Label(Frame3, text="R2", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=320)        
        entry431 = Entry(Frame3, width=5)
        entry431.place(in_=Frame3, x=180, y=320)
        #entry431.config(state='normal')
        
        output1 = ttk.Label(Frame3, text="C3", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=340)        
        entry427 = Entry(Frame3, width=5)
        entry427.place(in_=Frame3, x=180, y=340)
        #entry427.config(state='disabled')        
        
        output1 = ttk.Label(Frame3, text="R3", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=360)        
        entry432 = Entry(Frame3, width=5)
        entry432.place(in_=Frame3, x=180, y=360)
        #entry432.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="L3", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=380)        
        entry435 = Entry(Frame3, width=5)
        entry435.place(in_=Frame3, x=180, y=380)
        #entry435.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="C4", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=400)        
        entry436 = Entry(Frame3, width=5)
        entry436.place(in_=Frame3, x=180, y=400)
        #entry436.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="L5", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=420)        
        entry437 = Entry(Frame3, width=5)
        entry437.place(in_=Frame3, x=180, y=420)
        #entry437.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="C6", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=440)        
        entry438 = Entry(Frame3, width=5)
        entry438.place(in_=Frame3, x=180, y=440)
        #entry438.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="L7", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=460)        
        entry439 = Entry(Frame3, width=5)
        entry439.place(in_=Frame3, x=180, y=460)
        #entry439.config(state='disabled')
        
        output1 = ttk.Label(Frame4, text="Filter Capacitor Ratio To C2", font="Arial 10 bold")
        output1.place(in_=Frame4,x=30,y=0) 
        
        output1 = ttk.Label(Frame4, text="Apply Ratio C2/C3", font="Arial 10 bold")
        output1.place(in_=Frame4,x=40,y=30)        
        entry440 = Entry(Frame4, width=5)
        entry440.place(in_=Frame4, x=190, y=30)
        check_var = IntVar()
        Checkbutton(root, variable=check_var).place(in_=Frame4, x=10, y=30)
        
        output1 = ttk.Label(Frame4, text="Apply Ratio C2/C4", font="Arial 10 bold")
        output1.place(in_=Frame4,x=40,y=60)        
        entry441 = Entry(Frame4, width=5)
        entry441.place(in_=Frame4, x=190, y=60)
        check_var = IntVar()
        Checkbutton(root, variable=check_var).place(in_=Frame4, x=10, y=60)
        
        output1 = ttk.Label(Frame5, text="Filter Parameters", font="Arial 10 bold")
        output1.place(in_=Frame5,x=20,y=0) 
        
        output1 = ttk.Label(Frame6, text="LC Ladder Parameters", font="Arial 10 bold")
        output1.place(in_=Frame6,x=130,y=0)
        
        output1 = ttk.Label(Frame6, text="Corner Frequency", font="Arial 10 bold")
        output1.place(in_=Frame6,x=0,y=20)        
        entry442 = Entry(Frame6, width=5)
        entry442.place(in_=Frame6, x=150, y=20)
        
        output1 = ttk.Label(Frame6, text="Stop Frequency", font="Arial 10 bold")
        output1.place(in_=Frame6,x=200,y=20)        
        entry443 = Entry(Frame6, width=5)
        entry443.place(in_=Frame6, x=350, y=20)
        
        output1 = ttk.Label(Frame6, text="Passband Attenuation", font="Arial 10 bold")
        output1.place(in_=Frame6,x=0,y=50)        
        entry444 = Entry(Frame6, width=5)
        entry444.place(in_=Frame6, x=150, y=50)
        
        output1 = ttk.Label(Frame6, text="Stopband Attenuation", font="Arial 10 bold")
        output1.place(in_=Frame6,x=200,y=50)        
        entry445 = Entry(Frame6, width=5)
        entry445.place(in_=Frame6, x=350, y=50)
        
        change_input(self)
        
        entry412.delete(0, END)
        entry412.insert(0, input412)
        entry414.delete(0, END)
        entry414.insert(0, input414)        
        entry415.delete(0, END)
        entry415.insert(0, input415)        
        entry416.delete(0, END)
        entry416.insert(0, input416)
        entry417.delete(0, END)
        entry417.insert(0, self.input417)
        entry418.delete(0, END)
        entry418.insert(0, self.input418)
        entry419.delete(0, END)
        entry419.insert(0, self.input419)
        entry420.delete(0, END)
        entry420.insert(0, self.input420)
        entry421.delete(0, END)
        entry421.insert(0, self.input421)
        entry422.delete(0, END)
        entry422.insert(0, self.input422)
        entry423.delete(0, END)
        entry423.insert(0, self.input423)
        entry424.delete(0, END)
        entry424.insert(0, self.input424)
        entry425.delete(0, END)
        entry425.insert(0, self.input425)
        entry426.delete(0, END)
        entry426.insert(0, self.input426)
        entry427.delete(0, END)
        entry427.insert(0, self.input427)
        entry428.delete(0, END)
        entry428.insert(0, self.input428)
        #entry429.delete(0, END)
        #entry429.insert(0, input429)
        entry430.delete(0, END)
        entry430.insert(0, self.input430)
        entry431.delete(0, END)
        entry431.insert(0, self.input431)
        entry432.delete(0, END)
        entry432.insert(0, self.input432)
        #entry433.delete(0, END)
        #entry433.insert(0, input433)
        #entry434.delete(0, END)
        #entry434.insert(0, input434)
        entry435.delete(0, END)
        entry435.insert(0, self.input435)
        entry436.delete(0, END)
        entry436.insert(0, self.input436)
        entry437.delete(0, END)
        entry437.insert(0, self.input437)
        entry438.delete(0, END)
        entry438.insert(0, self.input438)
        entry439.delete(0, END)
        entry439.insert(0, self.input439)
    
    input417 = 0
    input418 = 0
    input419 = 0
    input420 = 0
    input421 = 0
    input422 = 0
    input423 = 0
    input424 = 0
    input425 = 0
    input426 = 0
    input427 = 0
    input428 = 0
    input429 = 0
    input430 = 0
    input431 = 0
    input432 = 0
    input433 = 0
    input434 = 0
    input435 = 0
    input436 = 0
    input437 = 0
    input438 = 0
    input439 = 0
    
global filtertype
global filterselect
global input412
global VCO_Freq_Hz
global PFD_Freq_Hz
global TCXO_Freq_Hz
global Desired_Band_Hz
global Start_Freq_Hz

VCO_Freq_Hz = "MHz"
PFD_Freq_Hz = "GHz"
TCXO_Freq_Hz = "GHz"
Desired_Band_Hz = "GHz"
Start_Freq_Hz = "GHz"
Stop_Freq_Hz = "Ghz"

array = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1    #Rows of 20
        ,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
        ,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
loadedvalues = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
               ,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
               ,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] #60
noise_array = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] #240
temp_noise_array = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
              ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] #240

filtertype = 0
filterselect = "Passive"
input412 = 0
#input413 = 0
input414 = 0
input415 = 0
input416 = 0


if __name__ == '__main__':
    root = tk.Tk()
    my_gui = MainGUI(root)
    root.geometry('1075x900')
    root.resizable(width=False, height=False)
    root.mainloop()
