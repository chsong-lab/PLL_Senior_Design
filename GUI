import matplotlib
matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import tkinter as tk
import tkinter.ttk as ttk
from tkinter import *

class MainGUI(Frame):
    def __init__(self, master):
        self.master = master
        Frame.__init__(self, master)
        self.grid()
        self.master.title("PLL TOOL")

        for r in range(40):
            self.master.rowconfigure(r, weight=1)    
        for c in range(38):
            self.master.columnconfigure(c, weight=1)
            
        Frame1=  Frame(highlightbackground="black", highlightcolor="black", highlightthickness=2, bd=0)
        Frame1.grid(row = 3, column =3, rowspan = 12, columnspan = 14, sticky = W+E+N+S) 
      
        Frame2=  Frame(highlightbackground="black", highlightcolor="black", highlightthickness=2, bd=0)
        Frame2.grid(row = 3, column =18, rowspan = 12, columnspan = 17, sticky = W+E+N+S) 
        
        Frame3=  Frame(highlightbackground="red", highlightcolor="black", highlightthickness=2, bd=0)
        Frame3.grid(row = 16, column =24, rowspan = 23, columnspan = 11, sticky = W+E+N+S) 
        
        label1 = ttk.Label(master, text="VCO Frequency", font="Arial 10 bold")
        label1.grid(row=4, column=4, sticky = W)   
        entry1 = Entry(master, width=10)
        entry1.grid(row=4, column=5)
        
        GuiTitle = ttk.Label(master, text="General Dynamics Mission Systems Phase Locked Loop Tool", font="Arial 15 bold")
        GuiTitle.grid(row=0, column=0,columnspan=38)
        
        load_button = Button(master, text="Load", bg="white",font="Arial 10 bold", command=self.load)
        load_button.grid(row=0, column=4, columnspan=1, sticky=W)
        
        save_button = Button(master, text="Save", bg="white",font="Arial 10 bold", command=self.save)
        save_button.grid(row=0, column=4, columnspan=2)

        
        label2 = ttk.Label(master, text="Fixed In-Loop Divider", font="Arial 10 bold")
        label2.grid(row=5, column=4, sticky = W)
        entry2 = Entry(master, width=10)
        entry2.grid(row=5, column=5)
        
        label3 = ttk.Label(master, text="PFD Frequency", font="Arial 10 bold")
        label3.grid(row=6, column=4, sticky = W)
        entry3 = Entry(master, width=10)
        entry3.grid(row=6, column=5)

        label4 = ttk.Label(master, text="TCXO Frequency", font="Arial 10 bold")
        label4.grid(row=7, column=4, sticky = W)
        entry4 = Entry(master, width=10)
        entry4.grid(row=7, column=5)

        label5 = ttk.Label(master, text="VCO Gain [Hz/V]", font="Arial 10 bold")
        label5.grid(row=8, column=4, sticky = W)
        entry5 = Entry(master, width=10)
        entry5.grid(row=8, column=5)

        label6 = ttk.Label(master, text="Phase Detector Gain", font="Arial 10 bold")
        label6.grid(row=9, column=4, sticky = W)
        entry6 = Entry(master, width=10)
        entry6.grid(row=9, column=5)

        label7= ttk.Label(master, text="Phase Detector Offset", font="Arial 10 bold")
        label7.grid(row=10, column=4, sticky = W)
        entry7 = Entry(master, width=10)
        entry7.grid(row=10, column=5)

        label8 = ttk.Label(master, text="PLL Division Ration N", font="Arial 10 bold")
        label8.grid(row=11, column=4, sticky = W)
        entry8 = Entry(master, width=10)
        entry8.grid(row=11, column=5)

        label9 = ttk.Label(master, text="Desired Bandwidth", font="Arial 10 bold")
        label9.grid(row=12, column=4, sticky = W)
        entry9 = Entry(master, width=10)
        entry9.grid(row=12, column=5)

        label10 = ttk.Label(master, text="Desired Phase Margin", font="Arial 10 bold")
        label10.grid(row=13, column=4, sticky = W)
        entry10 = Entry(master, width=10)
        entry10.grid(row=13, column=5)
        
        paramMenu=['GHz','MHz','kHz']
        option_select=StringVar(root)
        option_select.set("GHz")
        drop1=OptionMenu(root,option_select,*paramMenu)
        drop1.place(in_=Frame1,x=220,y=10)   
        drop1.config(font=('Arial 6 bold'),bg='white',width=3)
        drop1['menu'].config(font=('Arial 6 bold'),bg='white')
        
        paramMenu=['GHz','MHz','kHz']
        option_select=StringVar(root)
        option_select.set("GHz")
        drop2=OptionMenu(root,option_select,*paramMenu)
        drop2.place(in_=Frame1,x=220,y=70)   
        drop2.config(font=('Arial 6 bold'),bg='white',width=3)
        drop2['menu'].config(font=('Arial 6 bold'),bg='white') 
        
        paramMenu=['GHz','MHz','kHz']
        option_select=StringVar(root)
        option_select.set("GHz")
        drop3=OptionMenu(root,option_select,*paramMenu)
        drop3.place(in_=Frame1,x=220,y=245)   
        drop3.config(font=('Arial 6 bold'),bg='white',width=3)
        drop3['menu'].config(font=('Arial 6 bold'),bg='white') 
        
        paramMenu=['GHz','MHz','kHz']
        option_select=StringVar(root)
        option_select.set("GHz")
        drop3=OptionMenu(root,option_select,*paramMenu)
        drop3.place(in_=Frame1,x=220,y=100)   
        drop3.config(font=('Arial 6 bold'),bg='white',width=3)
        drop3['menu'].config(font=('Arial 6 bold'),bg='white') 
        
        label11 = ttk.Label(master, text="S-Domain Response Settings", font="Arial 10 bold")
        label11.grid(row=4, column=10, columnspan=6) 
        
        label12 = ttk.Label(master, text="Start Frequency", font="Arial 10 bold")
        label12.grid(row=5, column=11, sticky = W)
        entry12 = Entry(master, width=10)
        entry12.grid(row=5, column=13)
        
        paramMenu=['GHz','MHz','kHz']
        option_select=StringVar(root)
        option_select.set("GHz")
        drop3=OptionMenu(root,option_select,*paramMenu)
        drop3.place(in_=Frame1,x=600,y=68)   
        drop3.config(font=('Arial 6 bold'),bg='white',width=3)
        drop3['menu'].config(font=('Arial 6 bold'),bg='white') 
        
        label13 = ttk.Label(master, text="Stop Frequency", font="Arial 10 bold")
        label13.grid(row=6, column=11, sticky = W)
        entry13 = Entry(master, width=10)
        entry13.grid(row=6, column=13)
        
        paramMenu=['GHz','MHz','kHz']
        option_select=StringVar(root)
        option_select.set("GHz")
        drop3=OptionMenu(root,option_select,*paramMenu)
        drop3.place(in_=Frame1,x=600,y=40)   
        drop3.config(font=('Arial 6 bold'),bg='white',width=3)
        drop3['menu'].config(font=('Arial 6 bold'),bg='white') 
        
        label14 = ttk.Label(master, text="Number of Points", font="Arial 10 bold")
        label14.grid(row=7, column=11, sticky = W)
        entry14 = Entry(master, width=10)
        entry14.grid(row=7, column=13)
        
        label15 = ttk.Label(master, text="Transient Response Settings", font="Arial 10 bold")
        label15.grid(row=8, column=10,columnspan=6) 
        
        label16 = ttk.Label(master, text="      Transient Mode", font="Arial 10 bold")
        label16.grid(row=9, column=10, sticky = W)   
        
        
        
        
        def transResp(event):
        
            global chosen_option
            chosen_option1 = option_select1.get()
            
            if chosen_option1 == 'Frequency Step':
                label17 = ttk.Label(master, text="      Initial Frequency", font="Arial 10 bold")
                label17.grid(row=10, column=10, sticky = W) 
                entry17 = Entry(master, width=8)
                entry17.grid(row=10, column=10,columnspan=2,sticky=E)
       
                label18 = ttk.Label(master, text="      Frequency Step", font="Arial 10 bold")
                label18.grid(row=11, column=10, sticky = W)
                entry18 = Entry(master,width=8)
                entry18.grid(row=11, column=10,columnspan=2,sticky=E)
            
                label19 = ttk.Label(master, text="Initial Time", font="Arial 10 bold")
                label19.grid(row=10, column=13, columnspan=1, sticky = E) 
                entry19= Entry(master, width=8)
                entry19.grid(row=10, column=14, sticky=E)
            
                label20 = ttk.Label(master, text="Final Time", font="Arial 10 bold")
                label20.grid(row=11, column=13,columnspan=1, sticky = E) 
                entry20= Entry(master, width=8)
                entry20.grid(row=11, column=14, sticky=E)
                
            elif chosen_option1 == 'Frequency Sweep':
                label17 = ttk.Label(master, text="      Initial Frequency", font="Arial 10 bold")
                label17.grid(row=10, column=10, sticky = W) 
                entry17 = Entry(master, width=8)
                entry17.grid(row=10, column=10,columnspan=2,sticky=E)
       
                label18 = ttk.Label(master, text="     Frequency Delta", font="Arial 10 bold")
                label18.grid(row=11, column=10, sticky = W)
                entry18 = Entry(master,width=8)
                entry18.grid(row=11, column=10,columnspan=2,sticky=E)
        
                label19 = ttk.Label(master, text="Sweep Time", font="Arial 10 bold")
                label19.grid(row=10, column=13, columnspan=1, sticky = E) 
                entry19= Entry(master, width=8)
                entry19.grid(row=10, column=14, sticky=E)
                
                label20 = ttk.Label(master, text="Final Time", font="Arial 10 bold")
                label20.grid(row=11, column=13,columnspan=1, sticky = E) 
                entry20= Entry(master, width=8)
                entry20.grid(row=11, column=14, sticky=E)
                
            else:
                label17 = ttk.Label(master, text="    Initial Phase (deg)", font="Arial 10 bold")
                label17.grid(row=10, column=10, sticky = W) 
                entry17 = Entry(master, width=8)
                entry17.grid(row=10, column=10,columnspan=2,sticky=E)
       
                label18 = ttk.Label(master, text="    Phase Step (deg)", font="Arial 10 bold")
                label18.grid(row=11, column=10, sticky = W)
                entry18 = Entry(master,width=8)
                entry18.grid(row=11, column=10,columnspan=2,sticky=E)
        
                label19 = ttk.Label(master, text="Initial Time", font="Arial 10 bold")
                label19.grid(row=10, column=13, columnspan=1, sticky = E) 
                entry19= Entry(master, width=8)
                entry19.grid(row=10, column=14, sticky=E)

                label20 = ttk.Label(master, text="Final Time", font="Arial 10 bold")
                label20.grid(row=11, column=13,columnspan=1, sticky = E) 
                entry20= Entry(master, width=8)
                entry20.grid(row=11, column=14, sticky=E)
                
        
        
        myoptions=['Frequency Step','Frequency Sweep','Phase Step']
        option_select1=StringVar(root)
        option_select1.set("Frequency Step")
        drop=OptionMenu(root,option_select1,*myoptions, command=transResp)
        drop.grid(row=9, column= 11, columnspan=8, rowspan=3, sticky=N)   
        drop.config(font=('Arial 10 bold'),bg='white',width=15)
        drop['menu'].config(font=('Arial 10 bold'),bg='white')
                   
        label17 = ttk.Label(master, text="      Initial Frequency", font="Arial 10 bold")
        label17.grid(row=10, column=10, sticky = W) 
        entry17 = Entry(master, width=8)
        entry17.grid(row=10, column=10,columnspan=2,sticky=E)
       
        label18 = ttk.Label(master, text="      Frequency Step", font="Arial 10 bold")
        label18.grid(row=11, column=10, sticky = W)
        entry18 = Entry(master,width=8)
        entry18.grid(row=11, column=10,columnspan=2,sticky=E)
        
        label19 = ttk.Label(master, text="Initial Time", font="Arial 10 bold")
        label19.grid(row=10, column=13, columnspan=1, sticky = E) 
        entry19= Entry(master, width=8)
        entry19.grid(row=10, column=14, sticky=E)

        label20 = ttk.Label(master, text="Final Time", font="Arial 10 bold")
        label20.grid(row=11, column=13,columnspan=1, sticky = E) 
        entry20= Entry(master, width=8)
        entry20.grid(row=11, column=14, sticky=E)
        
        noise_button = Button(master, text="Noise Contributions", bg="white",font="Arial 10 bold", command=self.new_window1)
        noise_button.grid(row=12, column=11, sticky=W + E)
        
        label21 = ttk.Label(master, text="Show Integration Limits?", font="Arial 10 bold")
        label21.grid(row=12, column=12,columnspan=7, sticky = W)         
        check_var = IntVar()
        Checkbutton(master, variable=check_var).grid(row=12, column=11, columnspan=4, sticky = E)
        
        label22 = ttk.Label(master, text="      Noise Integration", font="Arial 10 bold")
        label22.grid(row=13, column=10, sticky = W)
        label23 = ttk.Label(master, text="                     From", font="Arial 10 bold")
        label23.grid(row=13, column=11, sticky = W)
        entry23= Entry(master, width=8)
        entry23.grid(row=13, column=13, sticky=W)
        label24 = ttk.Label(master, text="To", font="Arial 10 bold")
        label24.grid(row=13, column=14, sticky = W) 
        entry24= Entry(master, width=8)
        entry24.grid(row=13, column=14,columnspan=2)
        
        
        filterType = ttk.Label(master, text="Filter Type:", font="Arial 10 bold")
        filterType.grid(row=5, column=20,columnspan=5, sticky=W)
        filterOrder = ttk.Label(master, text="Filter Order:", font="Arial 10 bold")
        filterOrder.grid(row=6, column=20,columnspan=5, sticky=W)
        
        label25 = ttk.Label(master, text="C1", font="Arial 10 bold")
        label25.grid(row=7, column=20, sticky = W)
        entry25 = Entry(master, width=15)
        entry25.grid(row=7, column=24)
        
        label26 = ttk.Label(master, text="C2", font="Arial 10 bold")
        label26.grid(row=8, column=20, sticky = W)
        entry26 = Entry(master, width=15)
        entry26.grid(row=8, column=24)
        
        label27 = ttk.Label(master, text="C3", font="Arial 10 bold")
        label27.grid(row=9, column=20, sticky = W)
        entry27 = Entry(master, width=15)
        entry27.grid(row=9, column=24)
        
        label28 = ttk.Label(master, text="C4", font="Arial 10 bold")
        label28.grid(row=10, column=20, sticky = W)
        entry28 = Entry(master, width=15)
        entry28.grid(row=10, column=24)
        
        label29 = ttk.Label(master, text="l1", font="Arial 10 bold")
        label29.grid(row=11, column=20, sticky = W)
        entry29 = Entry(master, width=15)
        entry29.grid(row=11, column=24)
        
        label30 = ttk.Label(master, text="R1", font="Arial 10 bold")
        label30.grid(row=7, column=27, sticky = W)
        entry30 = Entry(master, width=15)
        entry30.grid(row=7, column=30)
        
        label31 = ttk.Label(master, text="R2", font="Arial 10 bold")
        label31.grid(row=8, column=27, sticky = W)
        entry31 = Entry(master, width=15)
        entry31.grid(row=8, column=30)
        
        label32 = ttk.Label(master, text="R3", font="Arial 10 bold")
        label32.grid(row=9, column=27, sticky = W)
        entry32 = Entry(master, width=15)
        entry32.grid(row=9, column=30)
        
        label33 = ttk.Label(master, text="R4", font="Arial 10 bold")
        label33.grid(row=10, column=27, sticky = W)
        entry33 = Entry(master, width=15)
        entry33.grid(row=10, column=30)
        
        label34 = ttk.Label(master, text="Rl", font="Arial 10 bold")
        label34.grid(row=11, column=27, sticky = W)
        entry34 = Entry(master, width=15)
        entry34.grid(row=11, column=30)

        label35 = ttk.Label(master, text="3dB Bandwidth", font="Arial 10 bold")
        label35.grid(row=12, column=24, sticky = E)
        entry35 = Entry(master, width=15)
        entry35.grid(row=12, column=30)
        
        label36 = ttk.Label(master, text="Actual Phase Margin", font="Arial 10 bold")
        label36.grid(row=13, column=24, sticky = E)
        entry36 = Entry(master, width=15)
        entry36.grid(row=13, column=30)
        
        filter_button = Button(master, text="Filter Design", bg="white",font="Arial 10 bold", command=self.filter_design)
        filter_button.grid(row=4, column=20, columnspan = 5, rowspan=2, sticky = N+ W)
        
        label37 = ttk.Label(master, text="Fix RC Values", font="Arial 10 bold")
        label37.grid(row=4, column=27,columnspan=4, sticky = E)         
        check_var = IntVar()
        Checkbutton(master, variable=check_var).grid(row=4, column=27, columnspan=3, sticky = E)
        
        label38 = ttk.Label(master, text="Time Domain Settling", font="Arial 10 bold")
        label38.grid(row=18, column=13,columnspan=5, sticky = E)
        
        label38 = ttk.Label(master, text="±Hz", font="Arial 10 bold")
        label38.grid(row=19, column=14,columnspan=1, sticky=E)
        entry38 = Entry(master, width=8)
        entry38.grid(row=19, column=14, sticky=W)
        
        label39 = ttk.Label(master, text="   ±Degrees", font="Arial 10 bold")
        label39.grid(row=20, column=14,columnspan=6, sticky=E)
        entry39 = Entry(master, width=8)
        entry39.grid(row=20, column=14, sticky=W)
        
        label39 = ttk.Label(master, text="Select Plot Type   ", font="Arial 10 bold")
        label39.grid(row=21, column=12,columnspan=5, sticky = E)
        
        plotType=['Open Loop Response','Close Loop Response','Loop Filter Response','Reference Phase Noise',
        'Phase Detector Noise','VCO Phase Noise','Closed Loop Modulated Filter Noise',
        'N Divider Phase Noise','Delta Sigma Noise','Open Loop Phase Noise Overalay',
        'Composite Phase Noise','All Noise Contributors','Time Domain Response',
        'Frequency Error Response','Time Domain Phase Settling','Percentage Noise Contributions',
        'High-Passed Phase Noise']
        option_select=StringVar(root)
        option_select.set("Open Loop Response")
        drop2=OptionMenu(root,option_select,*plotType)
        drop2.grid(row=22, column= 13, columnspan=10)   
        drop2.config(font=('Arial 10 bold'),bg='white',width=20)
        drop2['menu'].config(font=('Arial 10 bold'),bg='white')        
        
        label40 = ttk.Label(master, text="    Frequency Reponse Scale", font="Arial 10 bold")
        label40.grid(row=24, column=13,columnspan=6,sticky=E)
        
        label41 = ttk.Label(master, text="fmin", font="Arial 10 bold")
        label41.grid(row=25, column=14,columnspan=2, sticky=W)
        entry41 = Entry(master, width=8)
        entry41.grid(row=25, column=14,columnspan=1, sticky=E)
        entry41.insert(1,"1")
        
        label42 = ttk.Label(master, text="fmax", font="Arial 10 bold")
        label42.grid(row=26, column=14,columnspan=2, sticky=W)
        entry42 = Entry(master, width=8)
        entry42.grid(row=26, column=14,columnspan=1, sticky=E)
        entry42.insert(1,"10")
        
        label43 = ttk.Label(master, text="Ymin", font="Arial 10 bold")
        label43.grid(row=27, column=14,columnspan=2, sticky=W)
        entry43 = Entry(master, width=8)
        entry43.grid(row=27, column=14,columnspan=1, sticky=E)
        entry43.insert(1,"0")
        
        label44 = ttk.Label(master, text="Ymax", font="Arial 10 bold")
        label44.grid(row=28, column=14,columnspan=2, sticky=W)
        entry44 = Entry(master, width=8)
        entry44.grid(row=28, column=14,columnspan=1, sticky=E)
        entry44.insert(1,"50")
        
        paramMenu=['GHz','MHz','kHz']
        option_select=StringVar(root)
        option_select.set("Freq")
        drop3=OptionMenu(root,option_select,*paramMenu)
        drop3.place(in_=Frame1,x=697,y=525)   
        drop3.config(font=('Arial 6 bold'),bg='white',width=3)
        drop3['menu'].config(font=('Arial 6 bold'),bg='white') 
        
        paramMenu=['GHz','MHz','kHz']
        option_select=StringVar(root)
        option_select.set("Freq")
        drop3=OptionMenu(root,option_select,*paramMenu)
        drop3.place(in_=Frame1,x=697,y=555)   
        drop3.config(font=('Arial 6 bold'),bg='white',width=3)
        drop3['menu'].config(font=('Arial 6 bold'),bg='white') 
        
        scale_button = Button(master, text="Set Scale", bg="white",font="Arial 10 bold", command=master.destroy)
        scale_button.grid(row=29, column=14, sticky = W+E)
        
        exportPlot_button = Button(master, text="Export Plot", bg="white",font="Arial 10 bold", command=master.destroy)
        exportPlot_button.grid(row=33, column=14, sticky = W+E)
        
        label45 = ttk.Label(Frame3, text="Loop Parameters", font="Arial 12 bold")
        label45.place(in_=Frame3,x=80,y=0)
        
        paramMenu=['PLL Parameters','Integrated Noise: VCO','Time Domain Parameters']
        option_select=StringVar(root)
        option_select.set("PLL Parameters")
        drop3=OptionMenu(root,option_select,*paramMenu)
        drop3.place(in_=Frame3,x=20,y=25)   
        drop3.config(font=('Arial 10 bold'),bg='white',width=30)
        drop3['menu'].config(font=('Arial 10 bold'),bg='white') 

        output1 = ttk.Label(Frame3, text="Results 1:", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=60)
        output1 = ttk.Label(Frame3, text="Results 2:", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=80)
        
        compute_button = Button(master, text="Compute", bg="white",font="Arial 10 bold", command=master.destroy)
        compute_button.grid(row=39, column=30, sticky = E)        
        
        exportData_button = Button(master, text="Export Data", bg="white",font="Arial 10 bold", command=master.destroy)
        exportData_button.grid(row=34, column=14, sticky = W+E)

        
        f = Figure(figsize=(5,2))
        a = f.add_subplot(111)
        a.set_xscale('log')
        a.grid(b=True, which='minor', color='gray', linestyle='--')
        t = [10000,1000,100,10,1]
        s = [40,20,10,5,3 ]
        a.set_title ("My Plot Title", fontsize=10)
        a.set_ylabel("Y-Axis Title", fontsize=10)
        a.set_xlabel("Frequency", fontsize=10)
        a.plot(t,s, lw=1, color = 'blue', label ="my line")
        dataPlot = FigureCanvasTkAgg(f, self.master)
        dataPlot.show()
        dataPlot.get_tk_widget().grid(row=18, column=2, sticky=N+W+E+S, columnspan=11,rowspan=20)
        a.legend(loc='upper right', bbox_to_anchor=(1.1, 1.05),fancybox=True, shadow=True, ncol=1).draggable()
#    
    def load(self):
        root = Toplevel(self.master)
        root.geometry("100x100")
        
        label41 = ttk.Label(root, text="Nothing to see here", font="Arial 10 bold")
        label41.grid(row=2, column=3,columnspan=2, sticky=W) 
        
    def save(self):
        root = Toplevel(self.master)
        root.geometry("100x100")
        
        label41 = ttk.Label(root, text="I don't want your crap", font="Arial 10 bold")
        label41.grid(row=2, column=3,columnspan=2, sticky=W) 
        
    def new_window1(self):
        root = Toplevel(self.master)
        root.geometry("1000x500")
        global noise
        global last_noise
        
        noise = 1
        last_noise = 1
        
        label41 = ttk.Label(root, text=" ", font="Arial 10 bold")
        label41.grid(row=1, column=1,columnspan=1, sticky=W) 
        label41 = ttk.Label(root, text="   ", font="Arial 10 bold")
        label41.grid(row=2, column=1,columnspan=1, sticky=W)
        label41 = ttk.Label(root, text="   ", font="Arial 10 bold")
        label41.grid(row=2, column=4,columnspan=1, sticky=W)
        
        Frame1 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=300, height=450, bd=0)
        Frame1.grid(row = 2, column =2, rowspan = 2, columnspan = 2, sticky = W+E+N+S)
        
        Frame2 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=600, height=450, bd=0)
        Frame2.grid(row = 2, column =5, rowspan = 2, columnspan = 2, sticky = W+E+N+S) 
        
        def change_noise():
        
          #  global chosen_option
            #chosen_option = option_filter.get()
        
            if noise == 1:
                frame2.destroy()
            elif noise == 2:
                frame2.destroy()
            elif noise == 3:
                frame2.destroy()
            elif noise == 4:
                frame2.destroy()
            elif noise == 5:
                frame2.destroy()
            elif noise == 6:
                frame2.destroy()
            elif noise == 7:
                frame2.destroy()
            elif noise == 8:
                frame2.destroy()
            else:
                frame2.destroy()
        
        def change_noise1():
            global noise
            global last_noise
            last_noise = noise
            noise = 1
            
            Crystal_button.config(relief=SUNKEN)
            Reference_button.config(relief=RAISED)
            Phase_button.config(relief=RAISED)
            VCONoise_button.config(relief=RAISED)
            RFDivider_button.config(relief=RAISED)
            Operational_button.config(relief=RAISED)
            Delta_button.config(relief=RAISED)
            Composite_button.config(relief=RAISED)
            HighPass_button.config(relief=RAISED)
            
            command=change_noise
            
        def change_noise2():
            global noise
            global last_noise
            last_noise == noise
            noise = 2
            
            Crystal_button.config(relief=RAISED)
            Reference_button.config(relief=SUNKEN)
            Phase_button.config(relief=RAISED)
            VCONoise_button.config(relief=RAISED)
            RFDivider_button.config(relief=RAISED)
            Operational_button.config(relief=RAISED)
            Delta_button.config(relief=RAISED)
            Composite_button.config(relief=RAISED)
            HighPass_button.config(relief=RAISED)
            
            command=change_noise
            
        def change_noise3():
            global noise
            global last_noise
            last_noise == noise
            noise = 1
            
            Crystal_button.config(relief=RAISED)
            Reference_button.config(relief=RAISED)
            Phase_button.config(relief=SUNKEN)
            VCONoise_button.config(relief=RAISED)
            RFDivider_button.config(relief=RAISED)
            Operational_button.config(relief=RAISED)
            Delta_button.config(relief=RAISED)
            Composite_button.config(relief=RAISED)
            HighPass_button.config(relief=RAISED)
            
            command=change_noise
            
        def change_noise4():
            global noise
            global last_noise
            last_noise == noise
            noise = 1
            
            Crystal_button.config(relief=RAISED)
            Reference_button.config(relief=RAISED)
            Phase_button.config(relief=RAISED)
            VCONoise_button.config(relief=SUNKEN)
            RFDivider_button.config(relief=RAISED)
            Operational_button.config(relief=RAISED)
            Delta_button.config(relief=RAISED)
            Composite_button.config(relief=RAISED)
            HighPass_button.config(relief=RAISED)
            
            command=change_noise
            
        def change_noise5():
            global noise
            global last_noise
            last_noise == noise
            noise = 1
            
            Crystal_button.config(relief=RAISED)
            Reference_button.config(relief=RAISED)
            Phase_button.config(relief=RAISED)
            VCONoise_button.config(relief=RAISED)
            RFDivider_button.config(relief=SUNKEN)
            Operational_button.config(relief=RAISED)
            Delta_button.config(relief=RAISED)
            Composite_button.config(relief=RAISED)
            HighPass_button.config(relief=RAISED)
            
            command=change_noise
            
        def change_noise6():
            global noise
            global last_noise
            last_noise == noise
            noise = 1
            
            Crystal_button.config(relief=RAISED)
            Reference_button.config(relief=RAISED)
            Phase_button.config(relief=RAISED)
            VCONoise_button.config(relief=RAISED)
            RFDivider_button.config(relief=RAISED)
            Operational_button.config(relief=SUNKEN)
            Delta_button.config(relief=RAISED)
            Composite_button.config(relief=RAISED)
            HighPass_button.config(relief=RAISED)
            
            command=change_noise
            
        def change_noise7():
            global noise
            global last_noise
            last_noise == noise
            noise = 1
            
            Crystal_button.config(relief=RAISED)
            Reference_button.config(relief=RAISED)
            Phase_button.config(relief=RAISED)
            VCONoise_button.config(relief=RAISED)
            RFDivider_button.config(relief=RAISED)
            Operational_button.config(relief=RAISED)
            Delta_button.config(relief=SUNKEN)
            Composite_button.config(relief=RAISED)
            HighPass_button.config(relief=RAISED)
            
            command=change_noise
            
        def change_noise8():
            global noise
            global last_noise
            last_noise == noise
            noise = 1
            
            Crystal_button.config(relief=RAISED)
            Reference_button.config(relief=RAISED)
            Phase_button.config(relief=RAISED)
            VCONoise_button.config(relief=RAISED)
            RFDivider_button.config(relief=RAISED)
            Operational_button.config(relief=RAISED)
            Delta_button.config(relief=RAISED)
            Composite_button.config(relief=SUNKEN)
            HighPass_button.config(relief=RAISED)
            
            command=change_noise
            
        def change_noise9():
            global noise
            global last_noise
            last_noise == noise
            noise = 1
            
            Crystal_button.config(relief=RAISED)
            Reference_button.config(relief=RAISED)
            Phase_button.config(relief=RAISED)
            VCONoise_button.config(relief=RAISED)
            RFDivider_button.config(relief=RAISED)
            Operational_button.config(relief=RAISED)
            Delta_button.config(relief=RAISED)
            Composite_button.config(relief=RAISED)
            HighPass_button.config(relief=SUNKEN)
            
            command=change_noise
            
        
        output1 = ttk.Label(Frame1, text="Fractional N", font="Arial 10 bold")
        output1.place(in_=Frame1,x=10,y=10)        
        
        output1 = ttk.Label(Frame1, text="Enable Op-Amp Noise?", font="Arial 10 bold")
        output1.place(in_=Frame1,x=10,y=40)
        
        Crystal_button = Button(Frame1, text="Crystal Oscillator / Input Noise", bg="white",font="Arial 10 bold", width=25, command=change_noise1)
        Crystal_button.place(in_=Frame1, x=40, y=70)
        Crystal_button.config(relief=SUNKEN)
        
        Reference_button = Button(Frame1, text="Reference Path Noise", bg="white",font="Arial 10 bold", width=25, command=change_noise2)   # command=self.new_window1
        Reference_button.place(in_=Frame1, x=40, y=110)
        
        Phase_button = Button(Frame1, text="Phase Detector Noise", bg="white",font="Arial 10 bold", width=25, command=change_noise3)
        Phase_button.place(in_=Frame1, x=40, y=150)
        
        VCONoise_button = Button(Frame1, text="VCO Noise", bg="white",font="Arial 10 bold", width=25, command=change_noise4)
        VCONoise_button.place(in_=Frame1, x=40, y=190)
        
        RFDivider_button = Button(Frame1, text="RF Divider Noise", bg="white",font="Arial 10 bold", width=25, command=change_noise5)
        RFDivider_button.place(in_=Frame1, x=40, y=230)
        
        Operational_button = Button(Frame1, text="Operational Amplifier Noise", bg="white",font="Arial 10 bold", width=25, command=change_noise6)
        Operational_button.place(in_=Frame1, x=40, y=270)
        
        Delta_button = Button(Frame1, text="Delta Sigma Noise", bg="white",font="Arial 10 bold", width=25, command=change_noise7)
        Delta_button.place(in_=Frame1, x=40, y=310)
        
        Composite_button = Button(Frame1, text="Composite Noise / Output Path", bg="white",font="Arial 10 bold", width=25, command=change_noise8)
        Composite_button.place(in_=Frame1, x=40, y=350)
        
        HighPass_button = Button(Frame1, text="High Pass Noise Integration", bg="white",font="Arial 10 bold", width=25, command=change_noise9)
        HighPass_button.place(in_=Frame1, x=40, y=390)
        
        output1 = ttk.Label(Frame2, text="Frequency Offset", font="Arial 10 bold")
        output1.place(in_=Frame2,x=10,y=10)
        entry44 = Entry(Frame2, width=6)
        entry44.place(in_=Frame2, x=170, y=10)
        
        entry44 = Entry(Frame2, width=6)
        entry44.place(in_=Frame2, x=220, y=10)
        
        entry44 = Entry(Frame2, width=6)
        entry44.place(in_=Frame2, x=270, y=10)
        
        entry44 = Entry(Frame2, width=6)
        entry44.place(in_=Frame2, x=320, y=10)
        
        entry44 = Entry(Frame2, width=6)
        entry44.place(in_=Frame2, x=370, y=10)
        
        entry44 = Entry(Frame2, width=6)
        entry44.place(in_=Frame2, x=420, y=10)
        
        entry44 = Entry(Frame2, width=6)
        entry44.place(in_=Frame2, x=470, y=10)
        
        output1 = ttk.Label(Frame2, text="Hz", font="Arial 10 bold")
        output1.place(in_=Frame2,x=520,y=10)
        
        output1 = ttk.Label(Frame2, text="Crystal Oscillator Noise", font="Arial 10 bold")
        output1.place(in_=Frame2,x=10,y=40)
        entry44 = Entry(Frame2, width=6)
        entry44.place(in_=Frame2, x=170, y=40)
        
        entry44 = Entry(Frame2, width=6)
        entry44.place(in_=Frame2, x=220, y=40)
        
        entry44 = Entry(Frame2, width=6)
        entry44.place(in_=Frame2, x=270, y=40)
        
        entry44 = Entry(Frame2, width=6)
        entry44.place(in_=Frame2, x=320, y=40)
        
        entry44 = Entry(Frame2, width=6)
        entry44.place(in_=Frame2, x=370, y=40)
        
        entry44 = Entry(Frame2, width=6)
        entry44.place(in_=Frame2, x=420, y=40)
        
        entry44 = Entry(Frame2, width=6)
        entry44.place(in_=Frame2, x=470, y=40)
        
        output1 = ttk.Label(Frame2, text="dBc/Hz", font="Arial 10 bold")
        output1.place(in_=Frame2,x=520,y=40)
        
        output1 = ttk.Label(Frame2, text="Add / Subtract from Crystal Phase Noise?", font="Arial 10 bold")
        output1.place(in_=Frame2,x=10,y=70)
        entry44 = Entry(Frame2, width=6)
        entry44.place(in_=Frame2, x=470, y=70)
        
        output1 = ttk.Label(Frame2, text="dB", font="Arial 10 bold")
        output1.place(in_=Frame2,x=520,y=70)
        
        
        
    def OptionsMenu_SelectionEvent(event):
        label50 = ttk.Label(root, text="3rd and 4th Pole Calculations", font="Arial 12 bold")
        label50.grid(row=10, column=1,columnspan=1, sticky=W)
        
    def filter_design(self):
        root = Toplevel(self.master)
        root.geometry("750x600")
     #   root = Tk()
        
        Frame1 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=400, height=100, bd= 0)
        Frame1.grid(row = 2, column =2, rowspan = 8, columnspan = 12, sticky = W+E+N+S)

        Frame2 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=400, height=80, bd=0)
        Frame2.grid(row = 10, column =2, rowspan = 6, columnspan = 12, sticky = W+E+N+S)        
        
        Frame3 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=350, height=500, bd=0)
        Frame3.grid(row = 2, column =20, rowspan = 23, columnspan = 11, sticky = W+E+N+S)
        
        Frame4 = Frame(root, highlightbackground="black", highlightcolor="black", highlightthickness=2, width=400, height=80, bd=0)
        Frame4.grid(row = 16, column =2, rowspan = 6, columnspan = 12, sticky = W+E+N+S)
        
        output1 = ttk.Label(Frame1, text="Select Filter Type", font="Arial 10 bold")
        output1.place(in_=Frame1,x=10,y=0)
        
        def change_input(event):
        
            global chosen_option
            chosen_option = option_filter.get()
            
            if chosen_option == 'RC Filter':
                pic_option = pic1
                pic.config(image=pic_option)
                     
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=80, y=260)
                entry28.config(state='disabled')
                       
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=80, y=280)
                entry28.config(state='disabled')
              
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=80, y=300)
                entry28.config(state='disabled')
                
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=80, y=320)
                entry28.config(state='disabled')
                
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=80, y=340)
                entry28.config(state='disabled')
                
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=80, y=360)
                entry28.config(state='disabled')

                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=80, y=380)
                entry28.config(state='disabled')
                
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=180, y=240)
                entry28.config(state='normal')
                
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=180, y=260)
                entry28.config(state='disabled')
                
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=180, y=280)
                entry28.config(state='disabled')
                
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=180, y=300)
                entry28.config(state='normal')
                
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=180, y=320)
                entry28.config(state='normal')
                
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=180, y=340)
                entry28.config(state='disabled')
                
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=180, y=360)
                entry28.config(state='disabled')
                
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=180, y=380)
                entry28.config(state='disabled')
                
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=180, y=400)
                entry28.config(state='disabled')
               
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=180, y=420)
                entry28.config(state='disabled')
                
            else:
                pic_option = pic2
                pic.config(image=pic_option)
                       
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=180, y=240)
                entry28.config(state='disabled')
                
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=180, y=300)
                entry28.config(state='disabled')
                
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=180, y=320)
                entry28.config(state='disabled')
                
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=80, y=320)
                entry28.config(state='normal')
             
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=80, y=340)
                entry28.config(state='normal')
                
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=80, y=360)
                entry28.config(state='normal')
               
                entry28 = Entry(Frame3, width=5)
                entry28.place(in_=Frame3, x=80, y=380)
                entry28.config(state='normal')
        
        pic1 = PhotoImage(file='C:/Users/Eric/Desktop/Senior D/RC.gif')
        pic2 = PhotoImage(file='C:/Users/Eric/Desktop/Senior D/Butter.gif')
        pic = ttk.Label(root, image=pic1)
        pic.image = pic1 
        pic.place(in_=Frame3, x=10, y=0)   
        
        option_filter=StringVar(root)
        option_filter.set("RC Filter")    
        myoptions=['RC Filter','Butterworth']
        drop_menu = OptionMenu(root, option_filter, *myoptions, command=change_input)
        drop_menu.place(in_=Frame1, x=250, y=0)
        drop_menu.config(font=('Arial 7 bold'),bg='white',width=14)
        drop_menu['menu'].config(font=('Arial 7 bold'),bg='white')
        
        output1 = ttk.Label(Frame1, text="Filter Order", font="Arial 10 bold")
        output1.place(in_=Frame1,x=10,y=30)
        
        paramMenu=['2','3','4']
        option_select=StringVar(root)
        option_select.set("Select")
        drop4=OptionMenu(root,option_select,*paramMenu)
        drop4.place(in_=Frame1,x=250,y=30)   
        drop4.config(font=('Arial 7 bold'),bg='white',width=8)
        drop4['menu'].config(font=('Arial 7 bold'),bg='white')
        
        output1 = ttk.Label(Frame1, text="Calculation Method", font="Arial 10 bold")
        output1.place(in_=Frame1,x=10,y=60)
        
        paramMenu=['Exact Calculation','Exact Calculation','Exact Calculation']
        option_select=StringVar(root)
        option_select.set("Select")
        drop5=OptionMenu(root,option_select,*paramMenu)
        drop5.place(in_=root,x=250,y=60)   
        drop5.config(font=('Arial 7 bold'),bg='white',width=14)
        drop5['menu'].config(font=('Arial 7 bold'),bg='white')
        
        output1 = ttk.Label(Frame1, text="Damping Factor For Approximate Method", font="Arial 10 bold")
        output1.place(in_=Frame1,x=10,y=90)
        entry44 = Entry(Frame1, width=8)
        entry44.place(in_=Frame1, x=300, y=90)
        
        output1 = ttk.Label(Frame2, text="3rd Pole", font="Arial 10 bold")
        output1.place(in_=Frame2,x=10,y=10)        
        entry28 = Entry(Frame2, width=5)
        entry28.place(in_=Frame2, x=350, y=10)
        
        output1 = ttk.Label(Frame2, text="4rd Pole", font="Arial 10 bold")
        output1.place(in_=Frame2,x=10,y=40)        
        entry28 = Entry(Frame2, width=5)
        entry28.place(in_=Frame2, x=350, y=40)
        
        output1 = ttk.Label(Frame2, text="Optimization Parameter", font="Arial 10 bold")
        output1.place(in_=Frame2,x=10,y=70)        
        entry28 = Entry(Frame2, width=5)
        entry28.place(in_=Frame2, x=350, y=70)
        
        output1 = ttk.Label(Frame3, text="VCO Input", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=240)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=80, y=240)

        output1 = ttk.Label(Frame3, text="C3/Cvco", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=260)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=80, y=260)
        entry28.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="Rg", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=280)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=80, y=280)
        entry28.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="Rf", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=300)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=80, y=300)
        entry28.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="Cb", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=320)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=80, y=320)
        entry28.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="Rb1", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=340)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=80, y=340)
        entry28.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="Rb2", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=360)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=80, y=360)
        entry28.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="RL", font="Arial 10 bold")
        output1.place(in_=Frame3,x=0,y=380)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=80, y=380)
        entry28.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="C1", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=240)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=180, y=240)
        
        output1 = ttk.Label(Frame3, text="R1", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=260)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=180, y=260)
        entry28.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="L1", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=280)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=180, y=280)
        entry28.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="C2", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=300)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=180, y=300)
        
        output1 = ttk.Label(Frame3, text="R2", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=320)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=180, y=320)
        
        output1 = ttk.Label(Frame3, text="L3", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=340)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=180, y=340)
        entry28.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="C4", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=360)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=180, y=360)
        entry28.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="L5", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=380)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=180, y=380)
        entry28.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="C6", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=400)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=180, y=400)
        entry28.config(state='disabled')
        
        output1 = ttk.Label(Frame3, text="L7", font="Arial 10 bold")
        output1.place(in_=Frame3,x=140,y=420)        
        entry28 = Entry(Frame3, width=5)
        entry28.place(in_=Frame3, x=180, y=420)
        entry28.config(state='disabled')

        
        

if __name__ == '__main__':
    root = tk.Tk()
    my_gui = MainGUI(root)
    root.geometry('1075x900')
    root.resizable(width=False, height=False)
    root.mainloop()
